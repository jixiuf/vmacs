#   -*- coding: utf-8 -*-
# editor 用来定制操作键的行为，以下是默认行为 https://github.com/rime/librime/blob/master/src/rime/gear/editor.cc
editor:
  editor:
    bindings:
      space: confirm                        # 空格键：上屏候选项
      Return: commit_raw_input              # 回车键：上屏原始输入
      Control+Return: commit_script_text    # Ctrl+回车键：上屏变换后输入（经过 preedit_format 转换的）
      Control+Shift+Return: commit_comment  # Ctrl+Shift+回车键：上屏 comment
      BackSpace: revert                     # 退格键：向前删除（撤消上次输入）
      Delete: delete                        # Delete 键：向后删除
      Control+BackSpace: back_syllable      # Ctrl+退格键：删除一个音节
      Control+Delete: delete_candidate      # Ctrl+Delete键：删除或降权候选项
      Escape: cancel                        # Esc 键：取消输入
switches:
  switches:
    - name: ascii_mode
      states: [ 中, A ]
    - name: full_shape
      states: [ 半角, 全角 ]
    - name: traditionalization
      states: [ 简, 繁 ]
    - name: ascii_punct
      states: [ 。, ． ]
    # - name: emoji
    #   states: [ 💀, 😄 ]

opencc:
  traditionalize:
    option_name: traditionalization  # 对应 switches 中的 name
    opencc_config: s2t.json          # s2t.json | s2hk.json | s2tw.json | s2twp.json （Rime 内置配置，在程序目录可找到）
    tips: none                       # 转换提示: all 都显示 | char 仅单字显示 | none 不显示。
    tags: [ abc, number, gregorian_to_lunar ]  # 限制在对应 tag，不对其他如反查的内容做简繁转换




guide:
  # punctuator为标点的意思。下面import为导入，preset为预设，两词连起来就
  # 是导入预设的意思。从哪里导入呢？就是后面的default.yaml文件。
  punctuator:
    # import_preset: default
    # 引入symbols.yaml文件坦德标点的处理,比如/xl，则列出αβ
    import_preset: symbols

  # 从default.yaml 导入keybind
  key_binder:
    import_preset: default

  recognizer:
    import_preset: default
    patterns:
      reverse_lookup: "`[a-z]*'?$"
      reverse_lookup_stroke: "u[a-z]*'?$"
      #造词
      add_user_dict: "^AC[A-Za-z]*$"
      # 加了这句之后与import_preset: symbols 结合使用，当输入/开头时，输入特殊符号，如/xl输出αβ等，詳細见symbals.ymal
      # 比如 /2 输入二貳等
      punct: "^/([0-9]+[a-z]*|[a-z]+)$"
      number: "^R[0-9]+[.]?[0-9]*"        # 脚本将自动获取第 2 个字符 R 作为触发前缀，响应 lua_translator@*number_translator，数字金额大写
      calculator: "^cC.+"                 # 响应 lua_translator@*calc_translator，计算器。前缀设定项 calculator/prefix
      gregorian_to_lunar: "^N[0-9]{1,8}"  # 脚本将自动获取第 2 个字符 N 作为触发前缀，响应 lua_translator@*lunar，公历转农历，输入 N20240115 得到「二〇二三年腊月初五」

# 五笔支持长句，3码或1码时需以“,”结尾
wubi_sentence_speller:
  speller:
    max_code_length: 5
    # table_translator翻译器，支持自动上屏。例如 “zmhu”可以自动上屏“怎么回事”
    auto_select: true
    auto_select_pattern: ^[a-z]+,|^[a-df-zA-DF-Z]\w{3}|^e\w{4}
    # 如果不想让什么标点直接上屏，可以加在 alphabet，或者编辑标点符号为两个及以上的映射
    alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA[|,
    # initials 定义仅作为始码的按键，排除 ` 让单个的 ` 可以直接上屏
    initials: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA
    # 第一位<空格>是拼音之间的分隔符；第二位<'>表示可以手动输入单引号来分割拼音。
    delimiter: " ';"
    ## speller 未允许 aj 表示 an
    algebra:
    # 下面说的双拼 不是双拼输入法的双拼
      - derive/^(\w)(\w),(.+)$/$1$2/ # 纯双码的情况 (单字 只需要输前两个码的情况)
      - derive/^(\w)(\w),(\w)(\w);(\w)(\w),(.+)$/$5$6/ # 纯双码的情况(双字 后字需要输前两个码的情况)
      - derive/^(\w)(\w),(\w)(.+)$/$1$2$3/ # 双码+一位辅助码的情况(单字 后字需要输前3个码的情况)
      - derive/^(\w)(\w),(\w)(\w);(\w)(\w),(\w)(.+)$/$5$6$7/ # 双码+一位辅助码的情况(双字 后字需要输前3个码的情况)

      - derive|^(\w)(\w),(\w)(\w)$|$1$2$3$4,| # 双拼+2位辅助码的情况 结尾加","
      - derive|^(\w)(\w),(\w)(\w);(.+)$|$1$2$3$4,| # 双拼+2位辅助码的情况 结尾加","
      - derive|^(\w)(\w),(\w)(\w);(\w)(\w),(\w)(\w)$|$5$6$7$8,| # 双拼+2位辅助码的情况 结尾加","

      - derive|^(\w)(\w),(\w)0.+$|$1$2$3,| # 3码全码的字，3码全码后加","
      - derive|^(\w)(\w),00.+$|$1$2,| # 2码全码的字，2码全码后加","
      - derive|^(\w)0,00.+$|$1,| # 1码全码的字，3码全码后加","

      - derive|^.+;(\w)(\w),(\w)0$|$1$2$3,| # 3码全码的字，3码全码后加","
      - derive|^.+;(\w)(\w),00$|$1$2,| # 2码全码的字，2码全码后加","
      - derive|^.+;(\w)0,00$|$1,| # 1码全码的字，3码全码后加","
lua_config:
# Lua 配置: 日期、时间、星期、ISO 8601、时间戳的触发关键字
  date_translator:
    date: /date       # 日期： 2022-11-29
    time: /time       # 时间： 18:13
    week: /week       # 星期： 星期二
    datetime: /dt   # ISO 8601： 2022-11-29T18:13:11+08:00
    timestamp: /ts  # 时间戳： 1669716794
  # Lua 配置: 长词优先，提升 count 个词语，插入到第 idx 个位置。
  # 示例：将 2 个词插入到第 4、5 个候选项，输入 jie 得到「1接 2 解 3 姐 4 饥饿 5 极恶」
  # 配合     - lua_filter@*long_word_filter
  long_word_filter:
    count: 2
    idx: 4


