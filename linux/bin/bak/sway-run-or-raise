#!/usr/bin/env bash
# arg1: app_id or class (regexp)
# other args: command
# demo:
# 根据 arg1(app_id or window class) 来匹配当前运行的程序中有没有匹配的窗口，
# 1. 如果有
# 1.1 若此窗口已经是聚焦的窗口，则将焦点转移到上一次聚焦的窗口上 (需要 sway-track-prev-focus 脚本配合 来记录上一次聚焦的窗口的哪一个)
# 1.2 若此窗口不是当前聚焦的窗口，则将焦点转移到此窗口
# 2. 如果没有，则使用 arg2 及之后的参数 以启动目录程序,并聚焦之(有可能程序是在其他 workspace 启动，故需要将焦点转移到那)
# demo: from ../etc/xremap.yaml
# 使用 swaymsg exec -- 来执行 是为了避免重启 xremap 时 也跟着退出
# Super-C-e: { launch: ["swaymsg","exec","--","sway-run-or-raise","emacs","runemacs"] }
# app_id 可以使用正则如 firefox|firefox-esr
# Super-C-f: { launch: ["swaymsg","exec","--","sway-run-or-raise","firefox|firefox-esr","firefox"] }
# Super-C-d: { launch: ["swaymsg","exec","--","sway-run-or-raise", "--cd","--floating-only","--","dterm","alacritty  --working-directory=$(sway-cwd||echo $HOME) --class=dterm "] }
# Super-C-comma: { launch: ["swaymsg","exec","--","sway-run-or-raise", "--floating-only","--","dterm","alacritty  --working-directory=$(sway-cwd||echo $HOME) --class=dterm "] }
# Super-C-b: { launch: ["swaymsg","exec","--","sway-run-or-raise","weixin","weixin-uos 2>&1 >/dev/null"] }
# Super-C-3: { launch: ["swaymsg","exec","--","sway-run-or-raise","Bytedance-feishu","bytedance-feishu-stable  2>&1 >/dev/null"] }
# Super-C-8: { launch: ["swaymsg","exec","--","sway-run-or-raise","corplink","/opt/Corplink/corplink"] }

# 有个特例，参见 sway-cwd
# 若当前窗口是 emacs ,我能从 emacs 的 title 中获取到 emacs 的 default-directory(emacs 当前编辑的文件所在的目录)
# 而我的目录窗口若是 alacritty 终端，则当我切换到 alacritty 终端时，我希望执行 cd directory 命令，切换到与 emacs 中文件所在目录 相同的目录
# 需要依赖 ydotool
#
PROG=$( basename "$0" )
floating_only=""
cd=""

TEMP=$( getopt --options cfh --longoptions cd,floating-only,help -- "$@" ) || exit 1
eval set -- "$TEMP"

for i in "$@"; do
    case "$i" in
        -h|--help)
            echo "Usage: $PROG OPTIONS target [runstring]"
            echo
            echo "Give focus to a program based on target (app_id for sway or class for Xwayland). If we can't give focus to something with that app_id or class, then exec 'runstring'" |fmt
            echo
            echo "OPTIONS"
            echo "-f|--floating-only  只在 floating 窗口中寻找匹配的 target"
            exit 0
            ;;
        -c|--cd*)
            cd="set"
            shift
            ;;
        -f|--floating-only*)
            floating_only="set"
            shift
            ;;
    esac
done

shift

# $target= app_id for wayland or class for x11
target=$1
# 转成小写
# target=`echo $target|tr '[:upper:]' '[:lower:]'`
# 获取除第 1 个参数外的所有参数
shift 1
cmd="$@"
#
if [ -n "$floating_only" ]; then
    appinfo=`swaymsg -t get_tree | jq -r 'recurse(.nodes[], .floating_nodes[]) | select(( ((.app_id // "")| test("'"$target"'"; "i")) or ((.window_properties.class  // "")| test("'"$target"'"; "i"))) and (.type =="floating_con") )'`
else
    appinfo=`swaymsg -t get_tree | jq -r 'recurse(.nodes[], .floating_nodes[]) | select( ((.app_id // "")| test("'"$target"'"; "i")) or ((.window_properties.class  // "")|test("'"$target"'"; "i")))'`
fi
if [ ! "$appinfo" ]; then
    # if app not found ,run the cmde
    if echo "$cmd" | grep -q " "; then
        sh -c "$cmd" &
    else
        $cmd &
    fi
    sleep 1                   # wait starting
    # after starting , focus the new started window
    if [ -n "$floating_only" ]; then
        appinfo=`swaymsg -t get_tree | jq -r 'recurse(.nodes[], .floating_nodes[]) | select(( ((.app_id // "")| test("'"$target"'"; "i")) or ((.window_properties.class  // "")| test("'"$target"'"; "i"))) and (.type =="floating_con") )'`
    else
        appinfo=`swaymsg -t get_tree | jq -r 'recurse(.nodes[], .floating_nodes[]) | select( ((.app_id // "")| test("'"$target"'"; "i")) or ((.window_properties.class  // "")|test("'"$target"'"; "i")))'`
    fi
    app_id=`echo $appinfo|jq -r '(.app_id // "")'|head -n 1`
    class=`echo $appinfo|jq -r '(.window_properties.class // "")'|head -n 1`
    if [ -z "$app_id" ]; then # no app_id,x11 window
        swaymsg "[class=\"${class}\"] focus"
    else                    # wayland window
        swaymsg "[app_id=\"${app_id}\"] focus"
    fi
else
    # frontappinfo=`swaymsg -t get_tree | jq -r 'recurse(.nodes[], .floating_nodes[]) |select(.focused)'`
    isfocused=`echo $appinfo|jq -r '.focused'|head -n 1`
    # jq 的(.app_id // "") 表示取 app_id 若无此字段则为空串
    app_id=`echo $appinfo|jq -r '(.app_id // "")'|head -n 1`
    class=`echo $appinfo|jq -r '(.window_properties.class // "")'|head -n 1`
    id=`echo $appinfo|jq -r '(.id // 0)'|head -n 1`
    type=`echo $appinfo|jq -r '.type'|head -n 1` # con or floating_con
    # fullscreen_mode=`echo $appinfo|jq -r '.fullscreen_mode'|head -n 1`
    # is_mark_floating=`echo $appinfo|jq ".marks[] | select(. == \"sway-run-or-raise:floating_con:$id\") |true"`
    # is_mark_fullscreen=`echo $appinfo|jq ".marks[] | select(. == \"sway-run-or-raise:fullscreen:$id\") |true"`
    # scratchpad=$(echo "$tree" | jq '.nodes[].nodes[] | select(.name=="__i3_scratch")')
    # scratchpadids=$(echo "$scratchpad" | jq -r '.floating_nodes[].id')
    # # 如果此 window 是在 scratchpad 中的一个，则将其移到当前窗口
    # if echo "$ids" | grep -q "$1"; then
    #     swaymsg  "[con_id=$id] move window to workspace current"
    # fi
    #
    cwd=$(sway-cwd)
    if [  $isfocused == "false" ]; then
        if [ -z "$app_id" ]; then # no app_id,x11 window
            swaymsg "[class=\"${class}\"] focus"
        else                    # wayland window
            swaymsg "[app_id=\"${app_id}\"] focus"
        fi
            if [[ "$target" = "alacritty" || "$target" = "dterm" ]]; then
                if [[ -n "$cwd" && -n "$cd" ]]; then
                    # 如果 sway-cwd 获取到当前 working directory
                    # 且目标 app 是 alacritty 则在 alacritty 中 执行 cd 目标目录
                    wl-copy  --primary "cd $cwd"
                    sleep 0.5
                    # fcitx5-remote -s keyboard-us
                    # /usr/include/linux/input-event-codes.h
                    # keyd do C-u C-S-v enter C-l
                    ydotool key  29:1 22:1 22:0 42:1 47:1 47:0 42:0 29:0  28:1 28:0 29:1 38:1  38:0  29:0
                fi
            fi

        # if [ "$is_mark_floating" != "true" ]; then # 如果原来不是 floating，则将期恢复原状
        #     swaymsg floating disable
        #     swaymsg unmark "sway-run-or-raise:floating_con:$id"
        # fi
        # if [ "$is_mark_fullscreen" == "true" ]; then # 如果原来是 fullscreen
        #     swaymsg fullscreen enable
        #     swaymsg unmark "sway-run-or-raise:fullscreen:$id"
        # fi
    else

        # type =con or floating_con 来区分窗口是不是浮动窗口，以便
        if [ "$type" == "floating_con" ]; then
            ## （放进 scrtchpad 后都变成活动窗口了，故 mark 其原始 type）
            # swaymsg mark "sway-run-or-raise:floating_con:$id"
            swaymsg  "[con_id=$id] move window to scratchpad"
        else
            # 需要与 bin/sway-track-prev-focus  的配合使用
            # 如果目标窗口已经是当前窗口,且不是 floating，则将焦点转到上一次聚焦的窗口，
            swaymsg '[con_mark=_prev_con] focus'
        fi
        # if [ "$fullscreen_mode" == "1" ]; then
        #     swaymsg mark "sway-run-or-raise:fullscreen:$id"
          # fi
        # # swaymsg '[con_name="Term"] mark my-terminal'
    fi
fi
