#!/bin/bash
# Helper functions

# Escape the argument into a valid jq string literal (with quotes included)
# $1: string to escape
jq_escape() {
	echo -n "$1" | jq -Rs
}

# Extract item or items matching .name, including deduplication
# $1: item name, prepended or not with deduplication mark
array_from_name() {
  item_name=$(jq_escape "${1#$DEDUP_MARK }")
  echo "$ITEMS" | jq -r "map(select((.name == $item_name) and (.type == $TYPE_LOGIN)))"
}

# Extract item matching .id
# $1: string starting with ".id:"
array_from_id() {
  echo "$ITEMS" | jq -r ". | map(select(.id == $(jq_escape $1)))"
}

# Count the number of items in an array. Return true if more than 1 or none
# $1: Array of items
not_unique() {
  item_count=$(echo "$1" | jq -r '. | length')
  ! [[ $item_count -eq 1 ]]
}

# Pipe a document and deduplicate lines.
# Mark those duplicated by prepending $DEDUP_MARK
dedup_lines() {
  sort | uniq -c \
  | sed "s/^\s*1 //" \
  | sed -r "s/^\s*[0-9]+ /$DEDUP_MARK /"
}

# 取网站根域名
declare -A TLD='()'
initTld () {
    local tld
    while read -r tld; do
        [[ -n ${tld//*[ \/;*]*} ]] && TLD["${tld#\!}"]=''
    done < <(
        if [ ! -f "/tmp/public_suffix_list.dat"  ]; then
            curl https://publicsuffix.org/list/public_suffix_list.dat |grep -v "^//"|grep -v "^$" >/tmp/public_suffix_list.dat
        fi
        cat /tmp/public_suffix_list.dat
    )
}
tldExtract () {
    if [[ $1 == -v ]] ;then local _tld_out_var=$2;shift 2;fi
    local dom tld=$1 _tld_out_var
    while [[ ! -v TLD[${tld}] ]] && [[ -n $tld ]]; do
        IFS=. read -r dom tld <<< "$tld"
    done
    if [[ -v _tld_out_var ]] ;then
        printf -v $_tld_out_var '%s.%s' "$dom" "$tld"
    else
        echo "${dom}.${tld}"
    fi
}
initTld ; unset -f initTld

# 取网站根域名
# tldExtract www.stackoverflow.com
# stackoverflow com

# tldExtract sub.www.test.co.uk
# test co.uk

# tldExtract -v myVar sub.www.test.co.uk
# echo ${myVar% *}
# test
# echo ${myVar#* }
# co.uk

# tldExtract -v myVar www2.sub.city.nagoya.jp
# echo $myVar
# sub city.nagoya.jp