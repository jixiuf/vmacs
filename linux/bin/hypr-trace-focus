#!/bin/bash
# need: hyprctl,socat,jq
TERM_CLASS_REGEX=${TERM_CLASS_REGEX:-org\.wezfurlong\.wezterm|.*foot.*|.*kitty.*|.*Alacritty.*|dterm}

# trace last focused window address before current active window
# 数组变量，用于保存窗口地址的历史记录
window_history=()
# 序列化window_history数组到文件
# serialize_window_history() {
#     printf "%s\n" "${window_history[@]}" > /tmp/hypr_focus_hist.txt
# }

# # 从文件中读取序列化的window_history数组
# read_window_history() {
#     if [[ -f "/tmp/hypr_focus_hist.txt" ]]; then
#         IFS=$'\n' read -d '' -r -a window_history < /tmp/hypr_focus_hist.txt
#     fi
# }

get_last_win() {
    if [[ ${#window_history[@]} -ge 1 ]]; then
        echo "${window_history[-1]}"
    else
        echo ""
    fi
}
# 从历史记录中移除关闭的窗口地址
delete_win() {
    address="$1"
    # 检查历史记录中是否存在该地址，如果存在则先删除
    if [[ " ${window_history[*]} " == *" $address "* ]]; then
        for i in "${!window_history[@]}"; do
            if [[ "${window_history[$i]}" == "$address" ]]; then
                unset 'window_history[$i]'
            fi
        done
    fi
}
handle_active_window() {
    last_win_addr=$(get_last_win)
    if [ "$last_win_addr" != "$1" ]; then
        set_tmux_pane_id $1
        # 从历史记录中移除关闭的窗口地址
        delete_win $1
        # 将新的窗口地址添加到历史记录的末尾
        window_history+=("$address")
        # serialize_window_history
        # if [ -n "$last_win_addr" ]; then
        #     last_focus_app=`hyprctl clients -j | jq -rc '.[] | select(.address  | test("'"$last_win_addr"'"; "i"))'`
        #     last_floating=`echo $last_focus_app|jq -r '.floating'`
        #     last_class=`echo $last_focus_app|jq -r '.class'`
        #     if [[  "$last_floating" = "true" &&  ("$last_class" == *"org.wezfurlong.wezterm"*  || "$last_class" == *"Alacritty"*   || "$last_class" == *"dterm"*) ]]; then
        #         hyprctl dispatch "movetoworkspacesilent special,address:${last_win_addr}"
        #     fi
        # fi
        hide_dterm $1

    fi
    # echo "${#window_history[@]} ${window_history[@]}"
}
# hide my dropdown terminal when lose focus
hide_dterm(){
    active_addr="$1"
    # ws=$(hprctl activeworkspace -j)
    # ws_id=`echo $ws|jq -r '.id'`
    # ws_wins=$(hyprctl clients -j | jq -cr '.[] | select(((.class  | test("dterm"; "i"))) and (.workspace.id == '$term_workspace') )'|wc -l)
    dterm_app=$(hyprctl clients -j | jq -cr '.[] | select(.class  | test("dterm"; "i") )')
    dterm_addr=`echo $dterm_app|jq -r '.address'`

    if [ "$dterm_addr" != "$active_addr" ]; then
        hyprctl dispatch "movetoworkspacesilent special,address:${dterm_addr}"
    fi
}
# this is for the script named 'other-window'
# you can use other-window to select other pane of tmux
set_tmux_pane_id(){
    active_addr="$1"
    appinfo=`hyprctl clients -j | jq -rc '.[] | select(.address  | test("'"$active_addr"'"; "i"))'`
    class=`echo $appinfo|jq -r '.class'|head -n 1`
    title=`echo $appinfo|jq -r '.title'|head -n 1`
    # 当激活一个tmux windows时， 记录下窗口中pane 的，以方便other-window 里进行窗口切换
    if [[ "$class" =~ ^($TERM_CLASS_REGEX)$  && "$title" == "TMUX:"*    ]]; then
        # set -g set-titles on
        # set -g set-titles-string 'TMUX:#{session_name}:#{pane_title}'
        title=${title#TMUX:}
        tmux_session=${title%%:*}
        tmux_pane_cursor=$(cat /tmp/tmux-${tmux_session}-last-pane-id 2>/dev/null|tr -d '\n')
        if [ -z "$tmux_pane_cursor" ]; then # empty
            tmux display-message -t $tmux_session -p '#{pane_id}' >/tmp/tmux-${tmux_session}-last-pane-id
        else
            last_pane_exits=$(tmux list-panes -s -t $tmux_session -F '#{pane_id}'|grep $tmux_pane_cursor|wc -l)
            if [ "$last_pane_exits" = "0" ]; then
                tmux display-message -t $tmux_session -p '#{pane_id}' >/tmp/tmux-${tmux_session}-last-pane-id
            fi
        fi
        tmux_pane_cursor=$(cat /tmp/tmux-${tmux_session}-last-pane-id 2>/dev/null|tr -d '\n')
        last_pane_id=$(tmux display-message -t $tmux_session -p '#{pane_id}')
        if [ "$tmux_pane_cursor" = "$last_pane_id" ] ; then
            tmux select-pane -t $tmux_session:.+
        fi
    fi
}

handle_close_window() {
    address="$1"
    # 从历史记录中移除关闭的窗口地址
    delete_win $1
    # serialize_window_history
}


handle() {
    # echo "$1"
  case $1 in
    activewindowv2\>\>*)
        address="0x${1#*>>}"
        # echo "### $address"
        if [ "$address" != "0x," ]; then
            # echo "sssssss $address"
            handle_active_window $address
        fi
        ;;
    closewindow\>\>*)
        address="0x${1#*>>}"
        if [ "$address" != "0x," ]; then
            handle_close_window $address
        fi
        ;;

  esac
}

socat -U - UNIX-CONNECT:$XDG_RUNTIME_DIR/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock | while read -r line; do handle "$line"; done