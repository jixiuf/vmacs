#!/usr/bin/env bash
# need: jq,hypr-focus-last-win,cd.sh tmux.sh term.sh cwd
# hypr-run-or-raise -h for help
# arg1: target_class (regexp)
# other args: command
# demo:
# 根据 arg1(window target_class) 来匹配当前运行的程序中有没有匹配的窗口，
# 1. 如果有
# 1.1 若此窗口已经是聚焦的窗口，则将焦点转移到上一次聚焦的窗口上
# 1.2 若此窗口不是当前聚焦的窗口，则将焦点转移到此窗口
# 2. 如果没有，则使用 arg2 及之后的参数 以启动目录程序,并聚焦之(有可能程序是在其他 workspace 启动，故需要将焦点转移到那)
# hypr-run-or-raise emacs emacs
# hypr-run-or-raise --toggle emacs emacs
# hypr-run-or-raise 'firefox|firefox-esr' firefox
# hypr-run-or-raise --cd --float-only  Alacritty -- alacritty   --working-directory=$(cwd||echo $HOME)
# hypr-run-or-raise --toggle --float-only  Alacritty -- alacritty  --working-directory=$(cwd||echo $HOME)
# hypr-run-or-raise --toggle --floating   'dterm|Alacritty|kitty|foot'  term.sh --  --class=dterm --working-directory=$(cwd||echo $HOME)
# hypr-run-or-raise --toggle --cd --floating  'dterm|Alacritty|kitty|foot' term.sh -- --class=dterm  --working-directory=$(cwd||echo $HOME)

# 有个特例，参见 cwd
# 若当前窗口是 emacs ,我能从 emacs 的 title 中获取到 emacs 的 default-directory(emacs 当前编辑的文件所在的目录)
# 而我的目录窗口若是 alacritty 终端，则当我切换到 alacritty 终端时，我希望执行 cd directory 命令，切换到与 emacs 中文件所在目录 相同的目录
# 需要依赖 ydotool
#
TERM_CLASS_REGEX=${TERM_CLASS_REGEX:-org\.wezfurlong\.wezterm|.*foot.*|.*kitty.*|.*Alacritty.*|dterm}
PROG=$( basename "$0" )
float_only=""
floating=""
toggle=""
maximize=""
cd=""
move_to_current_workspace_if_floating=""
hide_front_floating_window=""

TEMP=$( getopt --options h --longoptions maximize,cd,floating,float-only,toggle,move-to-current-workspace-if-floating,hide-front-floating-window,help -- "$@" ) || exit 1
eval set -- "$TEMP"

for i in "$@"; do
    case "$i" in
        -h|--help)
            echo "Usage: $PROG OPTIONS target runstring"
            echo
            echo "Give focus to a program based on window class. If we can't give focus to something with that window class, then exec 'runstring'" |fmt
            echo "it would consistently cycling through all windows matching class regex"
            echo
            echo "OPTIONS"
            echo "--float-only only match floating app"
            echo "--maximize maximize the target window"
            echo "--floating make the target window floating"
            echo "--toggle toggle between the current window and target window"
            echo "--move_to_current_workspace-if-floating"
            echo "  move the target window to current workspace if it is a floating window"
            echo "--hide-front-floating-window"
            echo "  if current window is floating then move it to special workspace before focus target window "|fmt
            echo "--cd "
            echo "  when the target window is a termianl(with tmux running in it) and the working-directory from current window title is not empty, then after switch to the terminal it would insert a cd command"|fmt
            echo "  it support getting the workding-directory from window title, currently it support emacs and termianl"|fmt
            echo "  the format of working directory support emacs tramp path like /ssh:root@host:/tmp or root@host:/tmp, it would run ssh -t root@host  'cd /tmp/ && exec $SHELL'"|fmt
            echo "  you tmux.conf need:"
            echo "    set -g set-titles on"
            echo "    set -g set-titles-string 'TMUX:#{session_name}:#{pane_title}'"
            echo "  see script 'cwd' and 'cd.sh' for more details"
            echo " some demo:"
            echo "   hypr-run-or-raise emacs emacs"
            echo "   hypr-run-or-raise --toggle emacs emacs"
            echo "   hypr-run-or-raise 'firefox|firefox-esr' firefox"
            echo "   hypr-run-or-raise --cd --float-only  Alacritty -- alacritty   --working-directory=\$(cwd||echo \$HOME)"
            echo "   hypr-run-or-raise --toggle --float-only  Alacritty -- alacritty  --working-directory=\$(cwd||echo \$HOME)"
            echo "   hypr-run-or-raise --toggle --floating   'dterm|Alacritty|kitty|foot'  term.sh --  --class=dterm --working-directory=\$(cwd||echo \$HOME)"
            echo "   hypr-run-or-raise --toggle --cd --floating  'dterm|Alacritty|kitty|foot' term.sh -- --class=dterm  --working-directory=\$(cwd||echo \$HOME)"
            echo "   hypr-run-or-raise --toggle --move-to-current-workspace-if-floating  'dterm' -- term.sh  --class=dterm --working-directory=\$(cwd||echo \$HOME) -- tmux.sh --session dterm --cwd \$(cwd||echo \$HOME)"
            exit 0
            ;;
        --cd*)
            cd="set"
            shift
            ;;
        --hide-front-floating-window)
            hide_front_floating_window="--hide-front-floating"
            shift
            ;;
        --move-to-current-workspace-if-floating*)
            move_to_current_workspace_if_floating="--move-to-current-workspace-if-special"
            shift
            ;;
        --toggle*)
            toggle="set"
            shift
            ;;

        --maximize*)
            maximize="set"
            shift
            ;;
        --floating*)
            # 将目标窗口转成floating
            floating="true"
            shift
            ;;
        --float-only*)
            # 只匹配当前是floating 的
            float_only="set"
            shift
            ;;
    esac
done

shift # remove --

# $target= app_id for wayland or target_class for x11
target=$1
# 转成小写
# target=`echo $target|tr '[:upper:]' '[:lower:]'`
# 获取除第 1 个参数外的所有参数
shift 1
cmd="$@"

focus_last_win(){
    hypr-focus-last-win $move_to_current_workspace_if_floating \
                        --move-to-current-workspace-if-special \
                        --disable-front-fullscreen \
                        $hide_front_floating_window \
                        --hide-front-special-window \
                        --skip-class $target
    #     hyprctl dispatch "focuscurrentorlast"
}
#
if [ -n "$float_only" ]; then
    # only match floating app
    target_appinfo=`hyprctl clients -j | jq -rc 'map(select((.class  | test("'"$target"'"; "i")) and (.floating == true) ))|sort_by(.monitor, .workspace.id, .at[0],.at[1])|.[]'`
else
    # make the target floating
    if [ "$floating" == "true" ]; then
        # target_appinfo=`hyprctl clients -j | jq -rc '.[] | select((.class  | test("'"$target"'"; "i")) and (.floating == true) )'`
        # 优先匹配floating 的
        target_appinfo=`hyprctl clients -j | jq -rc 'map(select((.class  | test("'"$target"'"; "i")) and (.floating == true)))|sort_by(.monitor, .workspace.id, .at[0],.at[1])|.[]'`
        if [ -z "$target_appinfo" ]; then
            target_appinfo=`hyprctl clients -j | jq -rc 'map(select(.class |test("'"$target"'"; "i")))|sort_by(.monitor, .workspace.id, .at[0],.at[1])|.[]'`
        fi
    else
        target_appinfo=`hyprctl clients -j | jq -rc 'map(select(.class |test("'"$target"'"; "i")))| sort_by(.monitor, .workspace.id, .at[0],.at[1])|.[]'`
    fi
fi
if [ ! "$target_appinfo" ]; then
    # if app not found ,run the cmde
    if echo "$cmd" | grep -q " "; then
        $cmd &
    else
        $cmd &
    fi
    sleep 0.3
    # 如果期望新创建的窗口是floating,则尝试将期转成floating
    if [ "$floating" == "true" ]; then
        if [ -n "$float_only" ]; then
            target_appinfo=`hyprctl clients -j | jq -rc 'map(select((.class  | test("'"$target"'"; "i")) and (.floating == true) ))|sort_by(.monitor, .workspace.id, .at[0],.at[1])|.[]'`
        else
            target_appinfo=`hyprctl clients -j | jq -rc 'map(select((.class |test("'"$target"'"; "i"))))|sort_by(.monitor, .workspace.id, .at[0],.at[1])|.[]'`
        fi
        target_floating=`echo $target_appinfo|jq -r '.floating'`
        if [ "$target_floating" == "false" ]; then
            # 如果目标窗口不是floating,且 有--floating 参数（ 即想让目标窗口以floating的形式展示）
            hyprctl dispatch togglefloating address:${target_addr}
            hyprctl dispatch centerwindow
        fi
    fi
else
    # frontappinfo=`hyprctl clients -j | jq -r '.[] |select(.focused)'`
    front_app=`hyprctl activewindow -j`
    front_class=`echo $front_app|jq -r '.class'`
    front_addr=`echo $front_app|jq -r '.address'`
    front_floating=`echo $front_app|jq -r '.floating'`
    front_fullscreen=`echo $front_app|jq -r '.fullscreen'`

    front_ws_name=`echo $front_app|jq -r '.workspace.name'`
    front_ws_id=`echo $front_app|jq -r '.workspace.id'`
    # jq 的(.app_id // "") 表示取 app_id 若无此字段则为空串
    # target_class=`echo $target_appinfo|jq -r '.class'|head -n 1`
    # last_target_class=`echo $target_appinfo|jq -r '.class'|tail -n 1`
    addrs=`echo $target_appinfo|jq -rc '.address'`
    last_target_addr=`echo $target_appinfo|jq -rc '.address'|tail -n 1`
    first_target_addr=`echo $target_appinfo|jq -rc '.address'|head -n 1`
    # target_pid=`echo $target_appinfo|jq -r '.pid'`
    if [[ ! ("$front_class" =~ $target) ]]; then
        target_appinfo=`echo $target_appinfo |  jq -rc 'select(.address  | test("'"$first_target_addr"'"; "i"))'`
    elif [[  "$front_addr" == "$last_target_addr"  ]]; then
        if [  -n "$toggle" ]; then
            focus_last_win
            exit
        else
            target_appinfo=`echo $target_appinfo | jq -rc 'select(.address  | test("'"$first_target_addr"'"; "i"))'`
        fi
    else
        # len($target_appinfo)>1 and $front_app is one of them
        # and $front_app is not the last one of them
        # so we need find out the one after $front_app in $target_appinfo
        found=""
        while IFS= read -r addr; do
            if [ -n "$found" ]; then
                target_appinfo=`echo $target_appinfo | jq -rc 'select(.address  | test("'"$addr"'"; "i"))'`
                break
            fi
            if [ "$addr" == "$front_addr" ]; then
                found="set"
            fi
        done <<< "$addrs"
    fi
    target_floating=`echo $target_appinfo|jq -r '.floating'`
    last_target_addr=`echo $target_appinfo|jq -r '.address'`
    cwd=$(cwd)
    target_addr=`echo $target_appinfo|jq -r '.address'`
    target_title=`echo $target_appinfo|jq -r '.title'`
    target_ws_id=`echo $target_appinfo|jq -r '.workspace.id'`

    # 如果当前窗口是special 的window，则先隐藏之,以免其遮挡聚焦后的窗口
    if [[ "$front_ws_name" == *"special"* ]]; then
        hyprctl dispatch "togglespecialworkspace"
    fi
    # # 如果当前窗口是floating，则将其move 到special workspace,以免其遮挡聚焦后的窗口
    # if [[ "$front_floating" == "true" ]]; then
    #     hyprctl dispatch "movetoworkspacesilent special address:${front_addr}"
    # fi

    if [[ "$target_floating" == "true" || "$floating" == "true" ]]; then
        # 如果当前窗口是fullscreen，则将其恢复
        if [ "$front_fullscreen" == "true" ]; then
            hyprctl dispatch "fullscreen"
        fi
        # move window to current ws
        # hyprctl keyword animations:enabled 0
        if [ -n "$move_to_current_workspace_if_floating" ]; then
            hyprctl dispatch "movetoworkspacesilent e+0,address:${target_addr}"
        fi
        hyprctl dispatch "focuswindow address:${target_addr}"
        hyprctl dispatch "bringactivetotop"
        if [[ "$floating" = "true" && "$target_floating" = "false" ]]; then
            # 如果目标窗口不是floating,且 有--floating 参数（ 即想让目标窗口以floating的形式展示）
            hyprctl dispatch togglefloating address:${target_addr}
            hyprctl dispatch centerwindow
        fi

        # hyprctl keyword animations:enabled 1
        if [ $maximize ]; then
            hyprctl dispatch "fullscreen 1"
        fi
    else
        # 如果当前窗口是floating，则将其move 到special workspace,以免其遮挡聚焦后的窗口
        if [[ "$front_floating" == "true" && "$target_ws_id" == "$front_ws_id" && \
                  -n "$hide_front_floating_window" ]]; then
            hyprctl dispatch "movetoworkspacesilent special address:${front_addr}"
        fi
        hyprctl dispatch "focuswindow address:${target_addr}"
        hyprctl dispatch "bringactivetotop"
    fi
    if [[ "$target" =~ ^($TERM_CLASS_REGEX)$ ]]; then
        if [[ -n "$cwd" && -n "$cd" ]]; then
            # 如果 cwd 获取到当前 working directory
            # 且目标 app 是 alacritty 则在 alacritty 中 执行 cd 目标目录
            # root@host:/path
            regex="(\/ssh:)?([a-zA-Z0-9_\-]+@)?([a-zA-Z0-9_\.\-]+):(.+)"
            tmux_session=""
            if [[ $target_title == TMUX:* ]]; then
                # Remove the prefix "TMUX:" and then split the remaining string by ":"
                # 格式： "TMUX:session:path"
                target_title=${target_title#TMUX:}
                tmux_session=${target_title%%:*}
                # cwd=${cwd#*:}
            fi
            cd.sh $cwd $tmux_session
        fi
    fi
fi
