;;; lazy-loaddefs.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:



;;; Generated autoloads from compile-dwim.el

(defvar compile-dwim-alist `((mxml (or (name . "\\.mxml$")) (compile-dwim-make) "firefox %n.swf") (objc (mode . objc-mode) compile-dwim-xcode:build compile-dwim-xcode:build-and-run) (lua (or (name . "\\.lua$") (mode . lua-mode)) "lua %n.lua" "lua %n.lua") (go (name . "_test\\.go$") dape-dwim dape-dwim) (go (or (name . "\\.go$") (mode . go-ts-mode) (mode . go-mode)) (compile-dwim-make) dape-dwim) (rust (or (name . "\\.rs$") (mode . rust-ts-mode)) "cargo build" dape-dwim) (as (or (name . "\\.as$") (mode . actionscript-mode)) (compile-dwim-make) "firefox %n.swf") (asm (or (name . "\\.s$") (mode . asm-mode)) "as -o %n.o %f;ld -o %n %n.o " "./%n") (erlang (or (name . "\\.erl$") (mode . erlang-mode)) (erlang-dired-emake) "erl  \"%f\"") (perl (or (name . "\\.pl$") (mode . cperl-mode)) "%i -wc \"%f\"" "%i \"%f\"") (csharp (or (name . "\\.cs$") (mode . csharp-mode)) "csc %f" "%n") (c (or (name . "\\.c$") (mode . c-mode)) "gcc -o %n %f" ,(if (equal system-type 'windows-nt) "%n" "./%n")) (c++ (or (name . "\\.cpp$") (mode . c++-mode)) ("g++ -o %n %f" "g++ -g -o %n %f") ,(if (equal system-type 'windows-nt) "%n" "./%n") "%n") (java (or (name . "\\.java$") (mode . java-mode)) "javac %f" "java %n" "%n.class") (python (or (name . "\\.py$") (mode . python-mode)) dape-dwim dape-dwim) (javascript (or (name . "\\.js$") (mode . javascript-mode)) "smjs -f %f" "smjs -f %f") (tex (or (name . "\\.tex$") (name . "\\.ltx$") (mode . tex-mode) (mode . latex-mode)) "latex %f" "latex %f" "%n.dvi") (texinfo (name . "\\.texi$") (makeinfo-buffer) (makeinfo-buffer) "%.info") (sh (or (name . "\\.sh$") (mode . sh-mode)) "sh ./%f" "sh ./%f") (f99 (name . "\\.f90$") "f90 %f -o %n" "./%n" "%n") (f77 (name . "\\.[Ff]$") "f77 %f -o %n" "./%n" "%n") (php (or (name . "\\.php$") (mode . php-mode)) "php %f" "php %f") (elisp (or (name . "\\.el$") (mode . emacs-lisp-mode) (mode . lisp-interaction-mode)) (emacs-lisp-byte-compile) (emacs-lisp-byte-compile) "%fc")) "\
Settings for certain file type.
A list like ((TYPE CONDITION COMPILE-COMMAND RUN-COMMAND EXE-FILE) ...).
In commands, these format specification are available:

  %i  interpreter name
  %F  absolute pathname            ( /usr/local/bin/netscape.bin )
  %f  file name without directory  ( netscape.bin )
  %n  file name without extention  ( netscape )
  %e  extention of file name       ( bin )

The interpreter is the program in the shebang line. If the
program is valid(test with `executable-find'), then use this program,
otherwise, use interpreter in `interpreter-mode-alist' according
to the major mode.")
(custom-autoload 'compile-dwim-alist "compile-dwim" t)
(autoload 'compile-dwim-compile "compile-dwim" "\


(fn FORCE &optional SENTINEL)" t)
(autoload 'compile-dwim-run "compile-dwim" nil t)
(register-definition-prefixes "compile-dwim" '("compile-dwim-" "term-compile" "vterm-compile"))


;;; Generated autoloads from consult-dired-history.el

(register-definition-prefixes "consult-dired-history" '("consult-dir"))


;;; Generated autoloads from lazy-buffer.el

(defvar vmacs-consult--source-git `(:name "GitFile" :narrow 103 :category file :face consult-file :history file-name-history :action ,#'consult--file-action :items ,(lambda nil (require 'lazy-buffer) (append (vmacs--git-files 0 "~/repos/vmacs") (vmacs--git-files 0 "~/repos/dotfiles") (vmacs--git-files 1 nil)))) "\
Recent file candidate source for `consult-buffer'.")
(autoload 'bury-boring-windows "lazy-buffer" "\
close boring *Help* windows with `C-g'

(fn &optional BURY-CUR-WIN-IF-BORING)")
(autoload 'vmacs-prev-buffer "lazy-buffer" nil t)
(autoload 'vmacs-next-buffer "lazy-buffer" nil t)
(register-definition-prefixes "lazy-buffer" '("boring-window-modes" "git-repos-files-cache" "vmacs--git-files"))


;;; Generated autoloads from lazy-camelize.el

(autoload 'toggle-camelize "lazy-camelize" nil t)
(register-definition-prefixes "lazy-camelize" '("camel" "dasherize" "mapcar-head" "split-name" "underscore" "upcase-first-char"))


;;; Generated autoloads from lazy-command.el

(autoload 'dape-repl-dwim "lazy-command" nil t)
(autoload 'dape-eval "lazy-command" nil t)
(autoload 'dape-dwim "lazy-command" "\
If a DAP (Debug Adapter Protocol) session is active, terminate the session.
If there's no active DAP session, start a new session with default configuration.
When prefix argument is given, invoke `dape' interactively instead.

This function uses `dape' related functions to manage debug sessions for Emacs.
It also handles session configuration by looking up the appropriate settings
based on the current context and previous history." t)
(autoload 'vmacs-ai "lazy-command" nil t)
(autoload 'dired-mp4togif "lazy-command" nil t)
(autoload 'vmacs-pop-selection "lazy-command" nil t)
(autoload 'vmacs-yank-pop "lazy-command" nil t)
(autoload 'vmacs-goto-line "lazy-command" "\
gg:bob G:eof gggg:eof 33gg or go to line 33

(fn ARG)" t)
(autoload 'meow-expand-or-digit-argument "lazy-command" "\


(fn &optional N)" t)
(autoload 'vmacs-meow-prev "lazy-command" "\
Move to the prev line.

Will cancel all other selection, except char selection.

Use with universal argument to move to the last line of buffer.
Use with numeric argument to move multiple lines at once.

(fn ARG)" t)
(autoload 'vmacs-meow-next "lazy-command" "\
Move to the next line.

Will cancel all other selection, except char selection.

Use with universal argument to move to the last line of buffer.
Use with numeric argument to move multiple lines at once.

(fn ARG)" t)
(autoload 'vmacs-meow-append "lazy-command" "\
Move to the end of selection, switch to INSERT state." t)
(autoload 'meow-search-reverse "lazy-command" nil t)
(autoload 'vmacs-insert-pair "lazy-command" "\


(fn PREFIX SUFFIX)")
(autoload 'vmacs-meow-reverse "lazy-command" nil t)
(autoload 'vmacs-meow-join "lazy-command" nil t)
(autoload 'meow-set-mark "lazy-command" "\
Activate char selection, then move left." t)
(autoload 'vmacs-meow-iedit "lazy-command" nil t)
(autoload 'vmacs-meow-search-symbol "lazy-command" nil t)
(autoload 'vmacs-meow-search-symbol-prev "lazy-command" nil t)
(autoload 'vmacs-meow-grab "lazy-command" nil t)
(autoload 'meow-negative-find "lazy-command" nil t)
(autoload 'json-unescape "lazy-command" nil t)
(autoload 'vmacs-idle-timer "lazy-command")
(autoload 'open-line-or-new-line-dep-pos "lazy-command" "\
binding this to `C-j' if point is at head of line then
open-line if point is at end of line , new-line-and-indent" t)
(autoload 'smart-beginning-of-line "lazy-command" "\
Move point to first non-whitespace character or beginning-of-line.
Move point to beginning-of-line ,if point was already at that position,
  move point to first non-whitespace character. " t)
(autoload 'org-mode-smart-beginning-of-line "lazy-command" "\
Move point to first non-whitespace character or beginning-of-line.
Move point to beginning-of-line ,if point was already at that position,
  move point to first non-whitespace character. " t)
(autoload 'smart-end-of-line "lazy-command" "\
like `org-end-of-line' move point to
   virtual end of line
or Move point to end of line (ignore white space)
or end-of-line.
Move point to end-of-line ,if point was already at end of line (ignore white space)
  move point to end of line .if `C-u', then move to end of line directly.

(fn &optional ARG)" t)
(autoload 'org-mode-smart-end-of-line "lazy-command" "\
Move point to first non-whitespace character or end-of-line.
Move point to end-of-line ,if point was already at that position,
  move point to first non-whitespace character." t)
(autoload 'sdcv-to-buffer "lazy-command" "\
Search dict in region or world." t)
(autoload 'just-one-space-or-delete-horizontal-space "lazy-command" "\
just one space or delete all horizontal space." t)
(autoload 'vmacs-kill-region-or-line "lazy-command" "\
this function is a wrapper of (kill-line).
   When called interactively with no active region, this function
  will call (kill-line) ,else kill the region.

(fn &optional ARG)" t)
(autoload 'vmacs-kill-region-or-org-kill-line "lazy-command" "\
this function is a wrapper of (kill-line).
   When called interactively with no active region, this function
  will call (kill-line) ,else kill the region.

(fn &optional ARG)" t)
(autoload 'vmacs-kill-buffer-dwim "lazy-command" "\


(fn &optional BUF)" t)
(autoload 'vmacs-undo-kill-buffer "lazy-command" "\
Reopen the most recently killed file, if one exists." t)
(autoload 'kill-other-buffers "lazy-command" "\
kill all buffer which not showing in window." t)
(autoload 'bury-buffer-and-window "lazy-command" "\
bury buffer and window" t)
(autoload 'vmacs-append-semicolon-at-eol "lazy-command" "\


(fn &optional ARG)" t)
(autoload 'vmacs-comment-dwim-line "lazy-command" "\
Replacement for the comment-dwim command.
If no region is selected and current line is not blank and we are not at the end of the line,
then comment current line.
Replaces default behaviour of comment-dwim, when it inserts comment at the end of the line.

(fn &optional ARG)" t)
(autoload 'ibuffer-ediff-merge "lazy-command" "\


(fn &optional ARG)" t)
(autoload 'minibuffer-quit "lazy-command" "\
Quit the minibuffer command, even when the minibuffer loses focus." t)
(autoload 'minibuffer-refocus "lazy-command" "\
Refocus the minibuffer if it is waiting for input." t)
(autoload 'dos2unix "lazy-command" nil t)
(autoload 'unix2dos "lazy-command" nil t)
(autoload 'cd-iterm2 "lazy-command" nil t)
(autoload 'cd-iterm2-new-tab "lazy-command" nil t)
(autoload 'toggle-case-fold "lazy-command" nil t)
(autoload 'consult-hide-lines "lazy-command" nil t)
(register-definition-prefixes "lazy-command" '("backup-scratch" "delete-old-scratch-backups" "my-scratch-backup-directory" "vmacs-killed-file-list"))


;;; Generated autoloads from lazy-dired.el

(autoload 'dired-add-to-load-path-or-load-it "lazy-dired" "\
on `dired-mode',if thing under point is directory add it to `load-path'
if it is a el-file ,then `load' it" t)


;;; Generated autoloads from lazy-dired-sort.el

(register-definition-prefixes "lazy-dired-sort" '("lazy-dired-sort"))


;;; Generated autoloads from lazy-golang.el

(autoload 'golang-setter-getter "lazy-golang" "\
generate sets and gets for golang.

(fn BEG END)" t)
(autoload 'go-get-package-path "lazy-golang" "\
Get the package path of the Go file currently being edited and copy it to the clipboard.
   This function needs `go` command installed and a `go.mod` file in the project root directory." t)


;;; Generated autoloads from lazy-magit.el

(autoload 'toggle-diff-whitespace "lazy-magit" nil t)
(autoload 'vmacs-magit-blob-save "lazy-magit" nil t)
(autoload 'vmacs-magit-blob-quit "lazy-magit" nil t)
(autoload 'vmacs-magit-blob-toggle "lazy-magit" nil t)
(autoload 'vmacs-magit-diff-range "lazy-magit" "\
Show differences between two commits for current file.

(fn REV-OR-RANGE &optional ARGS FILES RANGE-P)" t)


;;; Generated autoloads from lazy-novel-mode.el

(autoload 'novel-fill "lazy-novel-mode" nil t)
(autoload 'chinese-normal "lazy-novel-mode" nil t)


;;; Generated autoloads from lazy-open-in-file-manager.el

(autoload 'open-in-filemanager "lazy-open-in-file-manager" nil t)
(register-definition-prefixes "lazy-open-in-file-manager" '("reveal-in-osx-finder" "w32explore"))


;;; Generated autoloads from lazy-org.el

(autoload 'vmacs-org-insert-image "lazy-org" "\


(fn EVENT)" t)
(autoload 'show-todo-list-after-init "lazy-org" "\


(fn &optional FRAME)")


;;; Generated autoloads from lazy-program-objc.el

(autoload 'objc-surround "lazy-program-objc" nil t)


;;; Generated autoloads from lazy-program-protobuf.el

(autoload 'protobuf-indent-align "lazy-program-protobuf" "\
do indent and align for protobuf.
bind`indent-region-function' to this function in protobuf-hook

(fn BEGIN END &optional COLUMN)" t)


;;; Generated autoloads from lazy-sudo.el

(autoload 'toggle-read-only-file-with-sudo "lazy-sudo" "\


(fn &optional ARGV)" t)
(register-definition-prefixes "lazy-sudo" '("toggle-with-sudo-history-host-user-alist"))


;;; Generated autoloads from lazy-version-control.el

(autoload 'log-view-ediff "lazy-version-control" "\
the ediff version of `log-view-diff'

(fn BEG END)" t)
(autoload 'vc-command "lazy-version-control" "\
run vc command" t)
(autoload 'vmacs-magit-push-default "lazy-version-control" "\


(fn &optional ARGS UPSTREAM)" t)
(autoload 'vmacs-magit-pull-default "lazy-version-control" "\


(fn &optional ARGS UPSTREAM)" t)
(autoload 'vmacs-vc-next-action "lazy-version-control" nil t)


;;; Generated autoloads from lazy-window.el

(autoload 'vmacs-split-window-horizontally "lazy-window" nil t)
(autoload 'vmacs-split-window-vertically "lazy-window" nil t)
(autoload 'vmacs-split-frame-vertically "lazy-window" "\
for sway" t)
(autoload 'vmacs-split-frame-horizontally "lazy-window" "\
for sway" t)
(autoload 'toggle-split-window "lazy-window" nil t)
(autoload 'gui-frame-cnt "lazy-window")
(autoload 'vmacs-split-window-or-other-window "lazy-window" nil t)
(autoload 'vmacs-split-window-or-prev-window "lazy-window" nil t)
(autoload 'vmacs-window-rotate "lazy-window" "\
Rotates the windows according to the currenty cyclic ordering." t)
(autoload 'move-border-left "lazy-window" "\


(fn ARG)" t)
(autoload 'move-border-right "lazy-window" "\


(fn ARG)" t)
(autoload 'move-border-up "lazy-window" "\


(fn ARG)" t)
(autoload 'move-border-down "lazy-window" "\


(fn ARG)" t)
(register-definition-prefixes "lazy-window" '("move-border-" "split-window-status" "win-xor"))


;;; Generated autoloads from mysql-query.el

(register-definition-prefixes "mysql-query" '("mysql-"))


;;; Generated autoloads from sqlparser-mysql-complete.el

(autoload 'mysql-complete-minor-mode "sqlparser-mysql-complete" "\
mode for editing mysql script

This is a minor mode.  If called interactively, toggle the
`Mysql-Complete minor mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `mysql-complete-minor-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'sqlparser-mysql-complete "sqlparser-mysql-complete" "\
complete tablename or column name depending on current point position .
when you first call this command ,it will ask you for the sql-database ,user ,password
host and port. the info will be stored in `mysql-connection-4-complete'. it can be
reused . with `C-u' you can change the dbname.
with `C-uC-u' you can use another new mysql connection

(fn &optional ARG)" t)
(register-definition-prefixes "sqlparser-mysql-complete" '("mysql-co" "sqlparser-"))


;;; Generated autoloads from term-title.el

(defvar term-title-mode nil "\
Non-nil if Term-Title mode is enabled.
See the `term-title-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `term-title-mode'.")
(custom-autoload 'term-title-mode "term-title" nil)
(autoload 'term-title-mode "term-title" "\
Synchronize terminal window titles with the selected Emacs tty frame.

Note that if the mode is later disabled, or emacs is exited
normally, the original title is not restored.

This is a global minor mode.  If called interactively, toggle the
`Term-Title mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='term-title-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "term-title" '("term-title-"))


;;; Generated autoloads from vmacs-dired-single.el

(register-definition-prefixes "vmacs-dired-single" '("dired-mouse-find-alternate-file" "vmacs-dired-single-kill-other-dired"))

;;; End of scraped data

(provide 'lazy-loaddefs)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; lazy-loaddefs.el ends here
