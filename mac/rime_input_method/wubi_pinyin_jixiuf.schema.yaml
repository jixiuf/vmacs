# Rime schema settings
# https://github.com/LEOYoon-Tsaw/Rime_collections/blob/master/Rime_description.md#%E4%BA%8Csegmentor
#  关于lua 开发相关白内容: https://github.com/hchunhui/librime-lua/wiki/Scripting
# encoding: utf-8
# 五笔支持长句，3码或1码时需以“/”结尾

schema:
  schema_id: wubi_pinyin_jixiuf
  name: "五笔·拼音jixiuf"
  version: "0.9"
  author:
    - 發明人 jixiuf
  description: |
    五筆字型86版＋漢語拼音混合輸入。
    碼表源自 qq五笔,使用深蓝词库工具.exe转换而成
  dependencies:
    # - pinyin_jixiuf        # 这里依赖pinyin_simp_jixiuf输入法,以方便扩展拼音字库
    # - pinyin_simp.extend
    - melt_eng  # 英文输入，作为次翻译器挂载到拼音方案
    # - liangfen  # 两分拼字，作为反查挂载到拼音方案

switches:
  # - name: ascii_mode
  #   reset: 0
  # # # 只保留中文输入法，避免无意间切到英文输入状态，因为我使用系统的英文输入法，还不是rime的
  # # # states: [ 中文, 西文 ]
  # # switches/@0/states:  [ 中文]
  #   states: [ 中文]
  #   # states: [ 中文, 西文 ]
  - name: full_shape
    states: [ 半角, 全角 ]
  - name: extended_charset
    states: [ 常用, 增廣 ]
  - name: ascii_punct
    states: [ 。，, ．， ]

  # - name: simplification
  #   states: [ 漢字, 汉字 ]
  - name: traditionalization
    states: [ 简, 繁 ]
    reset: 0

  - name: zh_simp               # 字库中如月繁体字，结合engine/filters/simplifier来实现简繁转化
    reset: 1
    states: [ 漢字, 汉字 ]

# 各字段含义
# https://github.com/LEOYoon-Tsaw/Rime_collections/blob/master/Rime_description.md

engine:
  processors:
    # 彻底地移除英文状态，似乎注掉ascii_composer更有效
    # - ascii_composer #處理西文模式及中西文切換 我把此移除验证禁用其英文输入态

    - recognizer #與 matcher 搭配，處理符合特定規則的輸入碼，如網址、反查等
    # - lua_processor@*sbxlm.key_binder # 绑定按键
    - key_binder # 在特定條件下將按鍵綁定到其他按鍵，如重定義逗號、句號爲候選翻頁鍵
    - speller                   # 將字母鍵加入輸入碼序列
    - punctuator #句讀處理器，將單個字符按鍵直接映射爲文字符號
    - selector                  #  選字、換頁  選字處理器，處理數字選字鍵、上、下候選定位、換頁鍵
    - navigator                 #   # 移動插入點  處理輸入欄內的光標移動鍵
    - express_editor  #編輯器，處理空格、回車上屏、回退鍵等
    # 用 fluency_editor 代替了 express_editor 是语句流，可以用空格断词。
    # - fluency_editor
  segmentors:                   # 這批組件識別不同內容類型，將輸入碼分段並加上tag
    - ascii_segmentor           # 標識西文段落〔譬如在西文模式下〕字母直接上屛
    - matcher                   # 配合recognizer標識符合特定規則的段落，如網址、反查等，加上特定tag
    - abc_segmentor             # 標識常規的文字段落，加上abc這個tag
    - punct_segmentor           #  標識句讀段落〔鍵入標點符號用〕加上punct這個tag
    - affix_segmentor@add_user_dict # 用戶自定義tag
    - affix_segmentor@verbatim ## not as the last of this list
    - fallback_segmentor
    # - affix_segmentor@pinyin
  translators:
    # lua翻译器
    - punct_translator    # 对应下面的punctuator，用来输入标点
    # 把script_translator@pinyin放在reverse_lookup_translatorp之上,这样输入拼音的时候才能自动调词频
    # 因为reverse_lookup_translator也能通过反查进行拼音的输入，但是它不支持调频
    # script_translator@pinyin   指定的通过下面tag:pinyin的方式则可以支持
    - table_translator@custom_phrase # 1、2码置顶
    # - table_translator #translator
    # @ 之后多了一个 *。这个星号表示后面的名字是模块名而不是全局变量名。
    # 当遇到星号时，librime-lua 会使用 require 机制加载模块，
    # 然后将其返回值作为 Rime 组件加载到输入法框架中。
    # - lua_translator@date_translator  #去 rime.lua 找date_translator function
    - lua_translator@*date_translator      # 时间、日期、星期 去 lua/目录下找date_translator.lua
    - script_translator@pinyin  # 放到reverse_lookup_translator 之前才可以调频拼音的输入
    - script_translator@translator-wubi
    - script_translator@user_dict_set
    - script_translator@add_user_dict
    - table_translator@melt_eng           # 英文输入
    - reverse_lookup_translator # `用拼音打出的字，会提示五笔编码
    - reverse_lookup_translator@reverse_lookup_stroke # u用拼音打出的字，会提示五笔编码
  filters:
  # 长词优先 (即wq 后 第4个词的长度必然大于第1个candidate,即提升部分长词到第4，5个选项)
  # 见下面 long_word_filter 相关配置
    - lua_filter@*long_word_filter
    - simplifier
    # - reverse_lookup_filter@wubi_comment # 展示五笔的编码
    - reverse_lookup_filter@wubi_comment_2 # 展示五笔的编码
    - uniquifier                # 去重，比如多个繁体字对应一个简体字，此时可能需要去重
    - lua_filter@reduce_english_filter  # 降低部分英语单词在候选项的位置
    - cjk_minifier  #過濾拼音輸入法中的罕用字  过滤掉一些不常见白字， 若想显示，Ctrl-`切换,比如输入te ,会月生僻字

simplifier:
  option_name: zh_simp
  # 你好不错
grammar:
  language: wanxiang-lts-zh-hans
  collocation_max_length: 5
  collocation_min_length: 2

speller:
  # 第一位<空格>是拼音之间的分隔符；第二位<'>表示可以手动输入单引号来分割拼音。
  delimiter: " ;'"              # 分词用
  max_code_length: 5
  # table_translator翻译器，支持自动上屏。例如 “zmhu”可以自动上屏“怎么回事”
  auto_select: true
  auto_select_pattern: ^[a-z]+/|^[a-df-zA-DF-Z]\w{3}|^e\w{4}
  # 如果不想让什么标点直接上屏，可以加在 alphabet，或者编辑标点符号为两个及以上的映射
  alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA[/|
  # initials 定义仅作为始码的按键，排除 ` 让单个的 ` 可以直接上屏
  initials: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA
  ## speller 未允许 aj 表示 an
  algebra:
  # 这几个是五笔整句上屏时对1码的字 如"的":"r" 需要输入 "r/" 来告知1码
    - derive|^(\w)(\w),(\w)0.+$|$1$2$3/| # 3码全码的字，3码全码后加/
    - derive|^(\w)(\w),00.+$|$1$2/| # 1码全码的字，3码全码后加/
    - derive|^(\w)0,00.+$|$1/| # 1码全码的字，3码全码后加/

    - derive|^.+;(\w)(\w),(\w)0$|$1$2$3/| # 3码全码的字，3码全码后加/
    - derive|^.+;(\w)(\w),00$|$1$2/| # 1码全码的字，3码全码后加/
    - derive|^.+;(\w)0,00$|$1/| # 1码全码的字，3码全码后加/


  #自动顶屏
  # auto_select: true
  # max_code_length: 4  # 四碼頂字上屏

#关于五笔拼音同时存在，且也能调拼音词频的配置 http://tieba.baidu.com/p/2283095493
# 以往要实现五笔拼音混打，用 table_translator 出五笔，拼音只好用 reverse_lookup_translator ，因为 r10n_translator 和 table_translator 是互斥的。
# 现在好了，你可以创建具名的 translator 实例：
# 这比原来的 table_translator + reverse_lookup_translator 强大之处是拼音也会独立地调频、组词造句鸟。
# 不过，如果你仍需要拼音反查五笔编码的功能，那就还需要 reverse_lookup_translator
# 如果没有别名，则 {table|script}_translator 默认用 translator: 节点， reverse_lookup_translator 默认用 reverse_lookup: 节点。

pinyin:                         # 针对script_translator@pinyin
  dictionary: luna_pinyin.extended
  enable_user_dict: true        # 调词频用的到 是否開啓用戶詞典〔用戶詞典記錄動態字詞頻、用戶詞〕
  enable_correction: true  #是否开启自动纠错
  enable_sentence: true         # 是否開啓自動造句
  enable_encoder: true          #  是否開啓自動造詞
  encode_commit_history: true   # 是否對已上屛詞自動成詞
  enable_completion: true #: 提前顯示尚未輸入完整碼的字〔僅table_translator有效〕
  initial_quality: 5 # 优先级
  # https://github.com/amzxyz/RIME-LMDG
  # 开启万象语言模型、万象原子词库 https://emacs-china.org/t/rime/28508/31
  contextual_suggestions: true
  max_homophones: 7
  max_homographs: 7
  # preedit_format:               # preedit_format 影响到输入框的显示和“Shift+回车”上屏的字符
  #   - xform/([jqxy])v/$1u/      # 显示为 ju qu xu yu
  #   # - xform/([nl])v/$1ü/      # 显示为 nü lü
  #   # - xform/([nl])ue/$1üe/    # 显示为 nüe lüe
  #   - xform/([nl])v/$1v/        # 显示为 nv lv
  #   - xform/([nl])ue/$1ve/      # 显示为 nve lve

# # wubi:                     # 五笔模式白 translator
# translator:                     # 五笔模式白 translator
#   # dictionary: wubi86
#   # https://github.com/amzxyz/RIME-LMDG
#   # 开启万象语言模型、万象原子词库 https://emacs-china.org/t/rime/28508/31
#   # 有可能并不支持五笔，先开着看看效果
#   # 是否使用语言模型优化输出结果〔需配合 grammar 使用〕
#   contextual_suggestions: true  #   # 开启ai https://emacs-china.org/t/rime/28508/31
#   max_homophones: 7 # 最大同音簇长度〔需配合 grammar 使用〕
#   max_homographs: 7 # 最大同形簇长度〔需配合 grammar 使用〕

#   dictionary: wubi_pinyin_jixiuf.extend
#   # prism: wubi_pinyin_jixiuf     # 不必指定，用默认的即可 生成的prism.bin文件的名字，默认wubi_pinyin_jixiuf.prism.bin
#   enable_charset_filter: true
#   enable_user_dict: true        # 调词频用的到 是否開啓用戶詞典〔用戶詞典記錄動態字詞頻、用戶詞〕
#   enable_sentence: true         # 是否開啓自動造句
#   sentence_over_completion: true # 在無全碼對應字而僅有逐鍵提示時也開啓智能組句〔僅table_translator有效〕
#   enable_completion: true #: 提前顯示尚未輸入完整碼的字〔僅table_translator有效〕
#   enable_correction: true  #是否开启自动纠错
#   enable_encoder: true          #  是否開啓自動造詞
#   encode_commit_history: true   # 是否對已上屛詞自動成詞
#   max_phrase_length: 4
#   initial_quality: 5          # 优先级
#   disable_user_dict_for_patterns:
#     - "^z.*$"                   # 对z开头的词不记录到用户词典中(不进行调频)
#     - "^[a-y]$"                   # 对单字母打出的字不进行调频
#     - "^[a-y]{1,2}$"                   # 对两个字母打出白字不进行调频
# wubi_comment:                   # 显示五笔编码， 这个配置好像不管哪种输入法打的字都显示五笔，我只想当用拼音输入时显示五笔编码 ，目前还不知怎么配
#   tags: [ abc ]
#   dictionary: wubi_pinyin_jixiuf.extend
#   overwrite_comment: true  # 覆蓋其他提示
#   comment_format:
#     # 同時顯示羅馬字拼寫
#     # - "xform/ .*$//"            # 当一个字有多个五笔编码时，只显示第一个，即把空格后的所有内容变成空
#     - "xform/[, ].*$//"            # 当一个字有多个五笔编码时，只显示第一个，即把空格后的所有内容变成空

wubi_comment_2:                   # 显示五笔编码， 这个配置好像不管哪种输入法打的字都显示五笔，我只想当用拼音输入时显示五笔编码 ，目前还不知怎么配
  tags: [ abc ]
  dictionary: wubi86.extended
  overwrite_comment: true  # 覆蓋其他提示
  comment_format:
    # 同時顯示羅馬字拼寫
    - "xform/[, ].*$//"            # 当一个字有多个五笔编码时，只显示第一个，即把空格后的所有内容变成空



translator-wubi:
  # https://github.com/amzxyz/RIME-LMDG
  # 开启万象语言模型、万象原子词库 https://emacs-china.org/t/rime/28508/31
  contextual_suggestions: true
  max_homophones: 7
  max_homographs: 7

  dictionary: wubi86.extended
  initial_quality: 6
  enable_completion: false
  ##  默认为不超过 2 个字的候选项显示输入码；将 2 改为 0 可关闭编码提示，
  ##  改为 1 则是只显示单字的输入码，依此类推。
  spelling_hints: 2
  comment_format:
    # - "xform/(^|[ '])[^[]+[[]/$1/" ## 编码提示只显示辅助码部分
    # 同時顯示羅馬字拼寫
    - "xform/[, ].*$//"            # 当一个字有多个五笔编码时，只显示第一个，即把空格后的所有内容变成空

  enable_user_dict: false # 是否开启自动调频
  preedit_format:

custom_phrase:
  dictionary: ""
  user_dict: custom_phrase/custom_phrase
  db_class: stabledb
  enable_completion: false
  enable_sentence: false
  initial_quality: 6

  # https://github.com/amzxyz/RIME-LMDG
  # 开启万象语言模型、万象原子词库 https://emacs-china.org/t/rime/28508/31
  contextual_suggestions: true
  max_homophones: 7
  max_homographs: 7

user_dict_set:
  dictionary: wubi86.extended
  initial_quality: 0
  enable_completion: false
  enable_sentence: false
  ##  默认为不超过 2 个字的候选项显示输入码；将 2 改为 0 可关闭编码提示，
  ##  改为 1 则是只显示单字的输入码，依此类推。
  spelling_hints: 2
  comment_format:
    # 同時顯示羅馬字拼寫
    - "xform/[, ].*$//"            # 当一个字有多个五笔编码时，只显示第一个，即把空格后的所有内容变成空
    # - "xform/(^|[ '])[^[]+[[]/$1/" ## 编码提示只显示辅助码部分
  enable_user_dict: true # 是否开启自动调频
  user_dict: user_ff.custom.dict
  db_class: tabledb
  # https://github.com/amzxyz/RIME-LMDG
  # 开启万象语言模型、万象原子词库 https://emacs-china.org/t/rime/28508/31
  contextual_suggestions: true
  max_homophones: 7
  max_homographs: 7


# 自定义词典加词(ac引导)
add_user_dict:
  tag: add_user_dict
  dictionary: wubi86.extended
  initial_quality: -1
  user_dict: user_ff.custom.dict
# ↓ 用户词典格式，tabledb（文本） 或 userdb （二进制）。
  db_class: tabledb
  enable_charset_filter: false
  enable_completion: true
  enable_encoder: true
  enable_sentence: true
  enable_user_dict: true
  encode_commit_history: false
  preedit_format:

  comment_format:
    # 同時顯示羅馬字拼寫
    - "xform/[, ].*$//"            # 当一个字有多个五笔编码时，只显示第一个，即把空格后的所有内容变成空
    # - "xform/(^|[ '])[^[]+[[]/$1/" ## 编码提示只显示辅助码部分
  prefix: "AC"
  tips: "〔自造词〕"
  # https://github.com/amzxyz/RIME-LMDG
  # 开启万象语言模型、万象原子词库 https://emacs-china.org/t/rime/28508/31
  contextual_suggestions: true
  max_homophones: 7
  max_homographs: 7


# 次翻译器，英文
melt_eng:
  dictionary: melt_eng     # 挂载词库 melt_eng.dict.yaml
  enable_sentence: false   # 禁止造句
  enable_user_dict: false  # 禁用用户词典
  initial_quality: 1.1     # 初始权重
  comment_format:          # 自定义提示码
    - xform/.*//           # 清空提示码


abc_segmentor:
  extra_tags:
    - reverse_lookup
    # wubi_comment

reverse_lookup:
  dictionary: luna_pinyin.extended
  prefix: "`"
  suffix: "'"
  tips: 〔拼音〕
  overwrite_comment: true # 覆盖其他提示
  preedit_format: # 上屏码显示格式，
    - xform/([nl])v/$1ü/
    - xform/([nl])ue/$1üe/
    - xform/([jqxy])v/$1u/
reverse_lookup_stroke:
  dictionary: stroke
  enable_completion: true
  prefix: "u"
  suffix: "'"
  tips: 〔笔画hspnz〕
  preedit_format:
    - xlit/hspnz/一丨丿丶乙/

# Lua 配置: 日期、时间、星期、ISO 8601、时间戳的触发关键字
date_translator:
  date: /date       # 日期： 2022-11-29
  time: /time       # 时间： 18:13
  week: /week       # 星期： 星期二
  datetime: /dt   # ISO 8601： 2022-11-29T18:13:11+08:00
  timestamp: /ts  # 时间戳： 1669716794
# Lua 配置: 长词优先，提升 count 个词语，插入到第 idx 个位置。
# 示例：将 2 个词插入到第 4、5 个候选项，输入 jie 得到「1接 2 解 3 姐 4 饥饿 5 极恶」
# 配合     - lua_filter@*long_word_filter
long_word_filter:
  count: 2
  idx: 4


# Lua 配置: 降低部分英语单词在候选项的位置
# 详细介绍 https://dvel.me/posts/make-rime-en-better/#短单词置顶的问题
# 正常情况： 输入 rug 得到 「1.rug 2.如果 …… 」
# 降低之后： 输入 rug 得到 「1.如果 2.rug …… 」
reduce_english_filter:
  # 降低到第 idx 个位置
  idx: 2
  # 要降低的单词，匹配的是输入码，即全小写。
  words: [rug, bus, ship, laos, bail, bam, bans, bib, bos, chic, chit, dab, dag, dal, dit, dub, dug, fab, gam, ger, gus, hem, hep, hud, kat, lam, lax, lex, lug, lux, moc, mos, mot, mum, nad, nay, nib, nip, pak, pap, pax, rig, rum, sac, sal, sax, sec, shin, sis, ska, slang, sus, tad, taj, tac, tic, yep, yum]



# punctuator为标点的意思。下面import为导入，preset为预设，两词连起来就
# 是导入预设的意思。从哪里导入呢？就是后面的default.yaml文件。
punctuator:
  # import_preset: default
  # 引入symbols.yaml文件坦德标点的处理,比如/xl，则列出αβ
  import_preset: symbols

# 从default.yaml 导入keybind
key_binder:
  import_preset: default

recognizer:
  import_preset: default
  patterns:
    reverse_lookup: "`[a-z]*'?$"
    reverse_lookup_stroke: "u[a-z]*'?$"
    #造词
    add_user_dict: "^AC[A-Za-z]*$"

    # 加了这句之后与import_preset: symbols 结合使用，当输入/开头时，输入特殊符号，如/xl输出αβ等，詳細见symbals.ymal
    # 比如 /2 输入二貳等
    punct: "^/([0-9]+[a-z]*|[a-z]+)$"
