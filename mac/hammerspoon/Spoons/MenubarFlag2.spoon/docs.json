[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "MenubarFlag2:drawIndicators(src)",
        "desc": "Draw the indicators corresponding to the given layout name",
        "doc": "Draw the indicators corresponding to the given layout name\n\nParameters:\n * src - name of the layout to draw. If the given element exists in `MenubarFlag2.colors`, it will be drawn. If it does not exist, then the indicators will be removed from the screen.\n\nReturns:\n * The MenubarFlag2 object",
        "name": "drawIndicators",
        "parameters": [
          " * src - name of the layout to draw. If the given element exists in `MenubarFlag2.colors`, it will be drawn. If it does not exist, then the indicators will be removed from the screen."
        ],
        "returns": [
          " * The MenubarFlag2 object"
        ],
        "signature": "MenubarFlag2:drawIndicators(src)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag2:getLayoutAndDrawindicators",
        "desc": "Draw indicators for the current keyboard method or layout",
        "doc": "Draw indicators for the current keyboard method or layout\n\nParameters:\n * None\n\nReturns:\n * The MenubarFlag2 object",
        "name": "getLayoutAndDrawindicators",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The MenubarFlag2 object"
        ],
        "signature": "MenubarFlag2:getLayoutAndDrawindicators",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag2:start()",
        "desc": "Start the keyboard layout watcher to draw the menubar indicators.",
        "doc": "Start the keyboard layout watcher to draw the menubar indicators.",
        "name": "start",
        "signature": "MenubarFlag2:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag2:stop()",
        "desc": "Remove indicators and stop the keyboard layout watcher",
        "doc": "Remove indicators and stop the keyboard layout watcher",
        "name": "stop",
        "signature": "MenubarFlag2:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "MenubarFlag2.allScreens",
        "desc": "Boolean to specify whether the indicators should be shown on all monitors or just the current one. Defaults to `true`",
        "doc": "Boolean to specify whether the indicators should be shown on all monitors or just the current one. Defaults to `true`",
        "name": "allScreens",
        "signature": "MenubarFlag2.allScreens",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag2.colors",
        "desc": "Table that contains the configuration of indicator colors",
        "doc": "Table that contains the configuration of indicator colors\n\nThe table below indicates the colors to use for a given keyboard\nlayout. The index is the name of the layout as it appears in the\ninput source menu. The value of each indicator is a table made of\nan arbitrary number of segments, which will be distributed evenly\nacross the width of the screen. Each segment must be a valid\n`hs.drawing.color` specification (most commonly, you should just\nuse the named colors from within the tables). If a layout is not\nfound, then the indicators are removed when that layout is active.\n\nIndicator specs can be static flag-like:\n```\n  Spanish = {col.green, col.white, col.red},\n  German = {col.black, col.red, col.yellow},\n```\nor complex, programmatically-generated:\n```\n[\"U.S.\"] = (\n   function() res={}\n      for i = 0,10,1 do\n         table.insert(res, col.blue)\n         table.insert(res, col.white)\n         table.insert(res, col.red)\n      end\n      return res\n   end)()\n```\nor solid colors:\n```\n  Spanish = {col.red},\n  German = {col.yellow},\n```\nContributions of indicator specs are welcome!",
        "name": "colors",
        "signature": "MenubarFlag2.colors",
        "stripped_doc": "The table below indicates the colors to use for a given keyboard\nlayout. The index is the name of the layout as it appears in the\ninput source menu. The value of each indicator is a table made of\nan arbitrary number of segments, which will be distributed evenly\nacross the width of the screen. Each segment must be a valid\n`hs.drawing.color` specification (most commonly, you should just\nuse the named colors from within the tables). If a layout is not\nfound, then the indicators are removed when that layout is active.\nIndicator specs can be static flag-like:\n```\n  Spanish = {col.green, col.white, col.red},\n  German = {col.black, col.red, col.yellow},\n```\nor complex, programmatically-generated:\n```\n[\"U.S.\"] = (\n   function() res={}\n      for i = 0,10,1 do\n         table.insert(res, col.blue)\n         table.insert(res, col.white)\n         table.insert(res, col.red)\n      end\n      return res\n   end)()\n```\nor solid colors:\n```\n  Spanish = {col.red},\n  German = {col.yellow},\n```\nContributions of indicator specs are welcome!",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag2.indicatorAlpha",
        "desc": "Number to specify the indicator transparency (0.0 - invisible; 1.0 - fully opaque). Defaults to 0.3",
        "doc": "Number to specify the indicator transparency (0.0 - invisible; 1.0 - fully opaque). Defaults to 0.3",
        "name": "indicatorAlpha",
        "signature": "MenubarFlag2.indicatorAlpha",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag2.indicatorHeight",
        "desc": "Number to specify the height of the indicator. Specify 0.0-1.0 to specify a percentage of the height of the menu bar, larger values indicate a fixed height in pixels. Defaults to 1.0",
        "doc": "Number to specify the height of the indicator. Specify 0.0-1.0 to specify a percentage of the height of the menu bar, larger values indicate a fixed height in pixels. Defaults to 1.0",
        "name": "indicatorHeight",
        "signature": "MenubarFlag2.indicatorHeight",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag2.indicatorInAllSpaces",
        "desc": "Boolean to specify whether the indicator should be shown in all spaces (this includes full-screen mode). Defaults to `true`",
        "doc": "Boolean to specify whether the indicator should be shown in all spaces (this includes full-screen mode). Defaults to `true`",
        "name": "indicatorInAllSpaces",
        "signature": "MenubarFlag2.indicatorInAllSpaces",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag2.timerFreq",
        "desc": "Number to indicate how frequently (in seconds) should the menubar indicator be updated. Defaults to 1.0.",
        "doc": "Number to indicate how frequently (in seconds) should the menubar indicator be updated. Defaults to 1.0.\n\nSometimes Hammerspoon misses the callback when the keyboard layout\nchanges. As a workaround, MenuBarFlag can automatically update the\nindicator at a fixed frequency. The timer can be disabled by\nsetting this parameter to 0.",
        "name": "timerFreq",
        "signature": "MenubarFlag2.timerFreq",
        "stripped_doc": "Sometimes Hammerspoon misses the callback when the keyboard layout\nchanges. As a workaround, MenuBarFlag can automatically update the\nindicator at a fixed frequency. The timer can be disabled by\nsetting this parameter to 0.",
        "type": "Variable"
      }
    ],
    "desc": "Color the menubar according to the current keyboard layout",
    "doc": "Color the menubar according to the current keyboard layout\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MenubarFlag2.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MenubarFlag2.spoon.zip)\n\nFunctionality inspired by [ShowyEdge](https://pqrs.org/osx/ShowyEdge/index.html.en)",
    "items": [
      {
        "def": "MenubarFlag2.allScreens",
        "desc": "Boolean to specify whether the indicators should be shown on all monitors or just the current one. Defaults to `true`",
        "doc": "Boolean to specify whether the indicators should be shown on all monitors or just the current one. Defaults to `true`",
        "name": "allScreens",
        "signature": "MenubarFlag2.allScreens",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag2.colors",
        "desc": "Table that contains the configuration of indicator colors",
        "doc": "Table that contains the configuration of indicator colors\n\nThe table below indicates the colors to use for a given keyboard\nlayout. The index is the name of the layout as it appears in the\ninput source menu. The value of each indicator is a table made of\nan arbitrary number of segments, which will be distributed evenly\nacross the width of the screen. Each segment must be a valid\n`hs.drawing.color` specification (most commonly, you should just\nuse the named colors from within the tables). If a layout is not\nfound, then the indicators are removed when that layout is active.\n\nIndicator specs can be static flag-like:\n```\n  Spanish = {col.green, col.white, col.red},\n  German = {col.black, col.red, col.yellow},\n```\nor complex, programmatically-generated:\n```\n[\"U.S.\"] = (\n   function() res={}\n      for i = 0,10,1 do\n         table.insert(res, col.blue)\n         table.insert(res, col.white)\n         table.insert(res, col.red)\n      end\n      return res\n   end)()\n```\nor solid colors:\n```\n  Spanish = {col.red},\n  German = {col.yellow},\n```\nContributions of indicator specs are welcome!",
        "name": "colors",
        "signature": "MenubarFlag2.colors",
        "stripped_doc": "The table below indicates the colors to use for a given keyboard\nlayout. The index is the name of the layout as it appears in the\ninput source menu. The value of each indicator is a table made of\nan arbitrary number of segments, which will be distributed evenly\nacross the width of the screen. Each segment must be a valid\n`hs.drawing.color` specification (most commonly, you should just\nuse the named colors from within the tables). If a layout is not\nfound, then the indicators are removed when that layout is active.\nIndicator specs can be static flag-like:\n```\n  Spanish = {col.green, col.white, col.red},\n  German = {col.black, col.red, col.yellow},\n```\nor complex, programmatically-generated:\n```\n[\"U.S.\"] = (\n   function() res={}\n      for i = 0,10,1 do\n         table.insert(res, col.blue)\n         table.insert(res, col.white)\n         table.insert(res, col.red)\n      end\n      return res\n   end)()\n```\nor solid colors:\n```\n  Spanish = {col.red},\n  German = {col.yellow},\n```\nContributions of indicator specs are welcome!",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag2:drawIndicators(src)",
        "desc": "Draw the indicators corresponding to the given layout name",
        "doc": "Draw the indicators corresponding to the given layout name\n\nParameters:\n * src - name of the layout to draw. If the given element exists in `MenubarFlag2.colors`, it will be drawn. If it does not exist, then the indicators will be removed from the screen.\n\nReturns:\n * The MenubarFlag2 object",
        "name": "drawIndicators",
        "parameters": [
          " * src - name of the layout to draw. If the given element exists in `MenubarFlag2.colors`, it will be drawn. If it does not exist, then the indicators will be removed from the screen."
        ],
        "returns": [
          " * The MenubarFlag2 object"
        ],
        "signature": "MenubarFlag2:drawIndicators(src)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag2:getLayoutAndDrawindicators",
        "desc": "Draw indicators for the current keyboard method or layout",
        "doc": "Draw indicators for the current keyboard method or layout\n\nParameters:\n * None\n\nReturns:\n * The MenubarFlag2 object",
        "name": "getLayoutAndDrawindicators",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The MenubarFlag2 object"
        ],
        "signature": "MenubarFlag2:getLayoutAndDrawindicators",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag2.indicatorAlpha",
        "desc": "Number to specify the indicator transparency (0.0 - invisible; 1.0 - fully opaque). Defaults to 0.3",
        "doc": "Number to specify the indicator transparency (0.0 - invisible; 1.0 - fully opaque). Defaults to 0.3",
        "name": "indicatorAlpha",
        "signature": "MenubarFlag2.indicatorAlpha",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag2.indicatorHeight",
        "desc": "Number to specify the height of the indicator. Specify 0.0-1.0 to specify a percentage of the height of the menu bar, larger values indicate a fixed height in pixels. Defaults to 1.0",
        "doc": "Number to specify the height of the indicator. Specify 0.0-1.0 to specify a percentage of the height of the menu bar, larger values indicate a fixed height in pixels. Defaults to 1.0",
        "name": "indicatorHeight",
        "signature": "MenubarFlag2.indicatorHeight",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag2.indicatorInAllSpaces",
        "desc": "Boolean to specify whether the indicator should be shown in all spaces (this includes full-screen mode). Defaults to `true`",
        "doc": "Boolean to specify whether the indicator should be shown in all spaces (this includes full-screen mode). Defaults to `true`",
        "name": "indicatorInAllSpaces",
        "signature": "MenubarFlag2.indicatorInAllSpaces",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag2:start()",
        "desc": "Start the keyboard layout watcher to draw the menubar indicators.",
        "doc": "Start the keyboard layout watcher to draw the menubar indicators.",
        "name": "start",
        "signature": "MenubarFlag2:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag2:stop()",
        "desc": "Remove indicators and stop the keyboard layout watcher",
        "doc": "Remove indicators and stop the keyboard layout watcher",
        "name": "stop",
        "signature": "MenubarFlag2:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag2.timerFreq",
        "desc": "Number to indicate how frequently (in seconds) should the menubar indicator be updated. Defaults to 1.0.",
        "doc": "Number to indicate how frequently (in seconds) should the menubar indicator be updated. Defaults to 1.0.\n\nSometimes Hammerspoon misses the callback when the keyboard layout\nchanges. As a workaround, MenuBarFlag can automatically update the\nindicator at a fixed frequency. The timer can be disabled by\nsetting this parameter to 0.",
        "name": "timerFreq",
        "signature": "MenubarFlag2.timerFreq",
        "stripped_doc": "Sometimes Hammerspoon misses the callback when the keyboard layout\nchanges. As a workaround, MenuBarFlag can automatically update the\nindicator at a fixed frequency. The timer can be disabled by\nsetting this parameter to 0.",
        "type": "Variable"
      }
    ],
    "name": "MenubarFlag2",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MenubarFlag2.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MenubarFlag2.spoon.zip)\n\nFunctionality inspired by [ShowyEdge](https://pqrs.org/osx/ShowyEdge/index.html.en)",
    "submodules": [],
    "type": "Module"
  }
]