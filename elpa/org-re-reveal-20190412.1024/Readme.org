# Local IspellDict: en
#+Title: Introduction to org-re-reveal
#+Author: Yujie Wen and others

# SPDX-License-Identifier: GPL-3.0-or-later
# Authors: Yujie Wen <yjwen.ty@gmail.com> and contributors to
#          org-reveal and org-re-reveal, see there:
#          https://github.com/yjwen/org-reveal/commits/master
#          https://gitlab.com/oer/org-re-reveal/commits/master

# Copyright (C) 2013-2018 Yujie Wen and contributors to org-reveal, see:
#                         https://github.com/yjwen/org-reveal/commits/master
# Copyright (C) 2017-2019 Jens Lechtenb√∂rger

#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1400 reveal_height:1000
#+OPTIONS: toc:1
#+REVEAL_PLUGINS: (notes search zoom)
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: cube
#+REVEAL_THEME: moon
#+REVEAL_HLEVEL: 2
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Org-re-reveal Introduction.">
#+REVEAL_POSTAMBLE: <p> Based upon work by yjwen. </p>
#+REVEAL_EXTRA_CSS: ./local.css

* Note

The project org-re-reveal started as
[[https://github.com/lechten/org-reveal][fork of org-reveal]].
It provides an export back-end for HTML presentations with
[[https://revealjs.com/][reveal.js]] from
[[https://orgmode.org/][Org mode]] source files.

If you are interested in org-re-reveal, I suggest that you take
a look at [[https://gitlab.com/oer/emacs-reveal][emacs-reveal]], which
embeds org-re-reveal, reveal.js, and useful
plugins as submodules, combined with suitable Emacs configuration.
A [[https://gitlab.com/oer/emacs-reveal-howto][Howto for the generation of reveal.js presentations (slides with audio) with emacs-reveal]]
exists as well.

I use emacs-reveal to generate Open Educational Resources (OER):
[[https://oer.gitlab.io/OS/][OER presentations for a course on operating systems]]

** Extensions of fork compared to upstream

   - Features in roughly chronological order
     - (Next to code changes for lexical binding and to avoid warnings by
       checkdoc, package lint, byte compiler)
     - Variables org-re-reveal-title-slide and
       org-re-reveal-external-plugins can be filenames (to maintain
       non-trivial code separately)
     - Allow to add data-state to title and TOC slide, class to TOC slide
     - Allow audio to be played with fragments (with audio-slideshow plugin)
     - Allow custom title and location for TOC (new options
       reveal-toc-slide-state, reveal-toc-slide-class, reveal-toc-slide-title)
     - Enable links to slides of other presentations (with new option
       reveal-inter-presentation-links)

   #+REVEAL: split

   - Features (continued)
     - More reveal.js options: mouseWheel, defaultTiming, fragmentInURL,
       pdfSeparateFragments
     - Allow frag-index on source blocks
     - Improve timing of presentations (org-re-reveal-defaulttiming,
       reveal-title-slide-timing)
     - New function org-re-reveal-format-spec
     - New options reveal-toc-footer, reveal-title-slide-state
     - New customizable variable org-re-reveal-slide-footer-html
     - Add customizable variable org-re-reveal-script-files (avoid loading
       of head.min.js in versions of reveal.js where it does not exist)
     - Allow to add class attribute to headline
     - Add class attributes (backwardlink, forwardlink) to internal links
     - Improve klipse support (add variable org-re-reveal-klipse-languages,
       fix PHP support)


** Additional user-facing changes by org-re-reveal
   - Version 1.0.0
     - Improved documentation
     - New export key binding (~C-c C-e v v~), customizable via
       ~org-re-reveal-keys~
   - Version 1.0.1
     - Fix and document changes for speaker notes template with
       Org version 9.2 and later
       - That version needs ~org-tempo~, templates are lower-case
   - Version 1.0.2
     - Allow to enable Klipse per source code block with configurable
       width and height
   - Version 1.0.3
     - New customizable variable ~org-re-reveal-body-attrs~
   - Version 1.0.4
     - Update of MathJax URL

* Reveal.js and org-re-reveal

  - *[[https://revealjs.com/][Reveal.js]]* is a tool for creating
    good-looking HTML presentations, authored by
    [[https://hakim.se/][Hakim El Hattab]].
  - *Org-re-reveal* exports your [[https://orgmode.org/][Org]]
    documents to reveal.js presentations.

    With org-re-reveal, you can create beautiful presentations with 3D
    effects from simple but powerful Org contents.

* Requirements and Installation

  - Reveal.js
  - GNU Emacs, version 24.4 or later
  - Org mode
  - Org-re-reveal
  - Htmlize or highlight.js
    - For source code highlighting, which is explained below
      - Depending on your version of Org mode, htmlize.el may be
        necessary even if you want to use highlight.js
      - (Code for highlight.js is taken over from org-reveal but was
        never tested with org-re-reveal)

** Install reveal.js

   Download reveal.js packages from [[https://github.com/hakimel/reveal.js/][here]].

   Extract reveal.js folders from the downloaded zip file.

   If you do not wish to download reveal.js yourself and would rather get a copy from a CDN,
   see the section [[https://gitlab.com/oer/org-re-reveal#set-the-location-of-revealjs][Set the location of reveal.js]]

** Install org-re-reveal from MELPA

   Package org-re-reveal is available on MELPA.  Use of MELPA requires
   some setup code in your ~.emacs~ file.
   See [[https://melpa.org/#/getting-started][here how to get started with MELPA]].

   This package defines the Org export back-end ~re-reveal~.  As usual
   for export back-ends, you can either customize
   ~org-export-backends~ to include ~re-reveal~ or add the following
   to your ~.emacs~ file.
   #+BEGIN_SRC lisp
   (require 'org-re-reveal)
   #+END_SRC

** Install org-re-reveal from GitLab

   You can download org-re-reveal as archive from GitLab
   ([[https://gitlab.com/oer/org-re-reveal/-/archive/master/org-re-reveal-master.zip][zip archive]]
   and several ~tar~ variants; note the download icon on the
   [[https://gitlab.com/oer/org-re-reveal][project page]]).

   Alternatively, you can clone the
   [[https://gitlab.com/oer/org-re-reveal][repository of org-re-reveal]]:
   #+BEGIN_SRC sh
   git clone https://gitlab.com/oer/org-re-reveal.git
   #+END_SRC

   Add the directory of =org-re-reveal.el= to your Emacs's ~load-path~, and add the
   following statement to your =.emacs= file.
   #+BEGIN_SRC lisp
   (require 'org-re-reveal)
   #+END_SRC

   *Note*: It is suggested to use a recent version of Org mode with
   org-re-reveal.  [[https://orgmode.org/][Installation of Org mode.]]

* Configuration

** Set the location of reveal.js

   org-re-reveal must know where reveal.js is on your computer before
   exporting Org contents. The location of reveal.js is the path to
   the top directory of the reveal.js packages, the directory which contains
   file *README.md*, but *not* the one that contains the file reveal.js.

   The default location is =./reveal.js=, relative to the Org file.

   Changing =org-re-reveal-root= 's value will change the location
   globally.  By setting option =REVEAL_ROOT=, the location is only
   affected within the Org file.  For example, add the following
   statement to your .emacs file:
#+BEGIN_SRC lisp
(setq org-re-reveal-root "file:///d:/reveal.js")
#+END_SRC

#+REVEAL: split
   *IMPORTANT*: If you use absolute paths to reveal.js as illustrated
   above, they should be in URL form,
   "file:///path_to_reveal.js".

   #+BEGIN_SRC org
   ,#+REVEAL_ROOT: file:///d:/reveal.js
   #+END_SRC

   You can also set =REVEAL_ROOT= to a URL to use reveal.js from
   the web instead of downloading a local copy.  The reveal.js
   documentation does not recommend this, though.

   #+BEGIN_SRC org
   ,#+REVEAL_ROOT: https://revealjs.com/
   #+END_SRC


*** URL form for file location

    For example if you cloned this repository to your home directory,
    this file in Mac OS X would be referred to as
    "file:///Users/username/org-re-reveal/Readme.org".  This file in
    GNU/Linux would be "file:///home/username/org-re-reveal/Readme.org" and
    in Windows this file would be
    "file:///c:/Users/username/org-re-reveal/Readme.org".  For more
    detail on this standard please refer to
    [[https://en.wikipedia.org/wiki/File_URI_scheme]]

** First Try

   The library org-re-reveal needs to be loaded first.  That can happen
   either by adding ~(require 'org-re-reveal)~ to your ~.emacs~ file or
   manually: Type "M-x load-library", then "org-re-reveal".

   Now you can export this manual, ~Readme.org~, into a reveal.js
   presentation by typing "C-c C-e v v".  That key binding can be
   changed by customizing ~org-re-reveal-keys~.

   Open the generated "Readme.html" in your browser and enjoy the
   cool slides.  (Of course, the location of reveal.js must be
   configured properly, as explained earlier.)

** The HLevel

   org-re-reveal maps each heading and its contents to one reveal.js
   slide. Since reveal.js arranges slides into a 2-dimensional matrix,
   org-re-reveal use a *HLevel* value to decide whether to map headings to horizontal
   or vertical slides.

   * Headings of level less than or equal to *HLevel* are mapped to horizontal
     slides.
   * Headings with a deeper level are mapped to vertical slides.

   HLevel's default value is 1, means only level 1 headings are arranged
   horizontally. Deeper headings are mapped to vertical slides below their
   parent level 1 heading.

*** HLevel's Effects on Slides Layout

    Assume we have a simple Org file as below:
#+BEGIN_SRC org
,* H1
,* H2
,** H2.1
,*** H2.1.1
,* H3
#+END_SRC

    If HLevel is 1, the default value, headings H2.1 and H2.1.1 will
    be mapped to vertical slides below the slides of heading H2.

    [[./images/hlevel.png]]

    If HLevel is changed to 2, slides of heading H2.1 will be changed
    to the main horizontal queue, and slides of heading H2.1.1 will be
    a vertical slide below it.

    [[./images/hlevel2.png]]

*** Configure HLevel's Value

    * Change variable =org-re-reveal-hlevel='s value to set HLevel globally.\\
      For example, add the following statement to your =.emacs= file.
#+BEGIN_SRC lisp
(setq org-re-reveal-hlevel 2)
#+END_SRC

    * Setting Org files local HLevel to option =REVEAL_HLEVEL=.
#+BEGIN_SRC org
,#+REVEAL_HLEVEL: 2
#+END_SRC

** Force Split

   If one heading has too many things to fit into one slide, you can
   split the contents into multiple vertical slides manually, by inserting

#+BEGIN_SRC org
,#+REVEAL: split
#+END_SRC

#+REVEAL: split

   Now a new slide begins after =#+REVEAL= keyword.

   *Warning!* Newer versions of Org mode may require the line containing
   ~#+REVEAL: split~ to be properly indented (depending on preceding
   contents).

** Select Theme and Transition

    Themes and transition styles are set globally throughout the whole
    file by setting options =REVEAL_THEME=, =REVEAL_TRANS=, and =REVEAL_SPEED=.

    For an example, please check the heading part of this document.
    Note that some themes access remote servers to download fonts.
    Your privacy policy should explain this.

    Available themes can be found in "css/theme/" in the reveal.js directory.

    Available transitions are: default|cube|page|concave|zoom|linear|fade|none.
** Set The Title Slide
   By default, org-re-reveal generates a title slide displaying the
   title, the author, the Email, the date and the time-stamp of the
   Org document, controlled by Org's [[https://orgmode.org/org.html#Export-settings][export settings]].

   To avoid a title slide, please set variable
   ~org-re-reveal-title-slide~ to ~nil~, or add ~reveal_title_slide:nil~ to
   ~#+OPTIONS:~ line.

   To restore the default title slide, please set variable
   ~org-re-reveal-title-slide~ to ~'auto~.

*** Customize the Title Slide

    To customize the title slide, please set ~org-re-reveal-title-slide~
    to a string of HTML markups. The following escape sequences can
    be used to retrieve document information:
    | ~%t~ | Title            |
    | ~%s~ | Subtitle         |
    | ~%a~ | Author           |
    | ~%A~ | Academic title   |
    | ~%e~ | Email            |
    | ~%d~ | Date             |
    | ~%m~ | Misc information |
    | ~%%~ | Literal %        |

#+REVEAL: split
    Alternatively, you can also write the title slide's HTML code
    (containing the above escape sequences) into a separate file and
    set ~org-re-reveal-title-slide~ to the name of that file.

** Set Slide Background

   Slide background can be set to a color, an image or a repeating image
   array by setting heading properties.

*** Single Colored Background
   :PROPERTIES:
   :reveal_background: #543210
   :END:

    Set property =reveal_background= to either an RGB color value, or any
    supported CSS color format.

#+BEGIN_SRC org
,*** Single Colored Background
   :PROPERTIES:
   :reveal_background: #123456
   :END:
#+END_SRC

*** Single Image Background - Instructions

    Set property =reveal_background= to an URL of background image.
    Set property =reveal_background_trans= to =slide= to make background image
    sliding rather than fading.
#+BEGIN_SRC org
,*** Single Image Background - Result
    :PROPERTIES:
    :reveal_background: ./images/adult-education-3258944_640.jpg
    :reveal_background_trans: slide
    :END:
#+END_SRC

*** Single Image Background - Result
    :PROPERTIES:
    :reveal_background: ./images/adult-education-3258944_640.jpg
    :reveal_background_trans: slide
    :END:

*** Repeating Image Background - Instructions

    Resize background image by setting property
    =reveal_background_size= to a number.

    Set property =reveal_background_repeat= to =repeat= to repeat
    image on the background.
#+BEGIN_SRC org
,*** Repeating Image Background - Result
    :PROPERTIES:
    :reveal_background: ./images/adult-education-3258944_640.jpg
    :reveal_background_size: 200px
    :reveal_background_repeat: repeat
    :END:
#+END_SRC

*** Repeating Image Background - Result
    :PROPERTIES:
    :reveal_background: ./images/adult-education-3258944_640.jpg
    :reveal_background_size: 200px
    :reveal_background_repeat: repeat
    :END:

*** Title Slide Background Image

    To set the title slide's background image, please specify the
    following options:

    * =REVEAL_TITLE_SLIDE_BACKGROUND=: A URL to the background image.
    * =REVEAL_TITLE_SLIDE_BACKGROUND_SIZE=: HTML size specification, e.g. ~200px~.
    * =REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT=: set to ~repeat~ to repeat the image.

** Slide Size

   Reveal.js scales slides to best fit the display resolution, but you can
   also specify the desired size by settings the option tags =width= and =height=.

   The scaling behavior can also be constrained by setting following
   options:
   * =#+REVEAL_MARGIN:= :: a float number, the factor of empty area
        surrounding slide contents.
   * =#+REVEAL_MIN_SCALE:= :: a float number, the minimum scaling down
        ratio.
   * =#+REVEAL_MAX_SCALE:= :: a float number, the maximum scaling up
        ratio.

** Slide Numbering

   By default, a flatten slide number is showed at the lower-right corner of each slide.

   To disable slide numbering, please add ~reveal_slide_number:nil~ to
   ~#+OPTIONS:~ line.

   From reveal.js 3.1.0, slide numbering can have several custom
   formats. To choose one format, please set ~reveal_slide_number~ to
   its proper string. For example, ~reveal_slide_number:h/v~.

   Supported format string can be found in [[https://github.com/hakimel/reveal.js/#slide-number][reveal.js manual]].


** Slide Header/Footer
   Specify Slide header/footer by =#+REVEAL_SLIDE_HEADER:= and
   =#+REVEAL_SLIDE_FOOTER:=. The option content will be put into
   divisions of class =slide-header= and =slide-footer=, so you can
   control their appearance in custom CSS file(see [[Extra Stylesheets]]).
   By default header/footer content will only display on content
   slides. To show them also on the title and toc slide you can add
   ~reveal_global_header:t~ and ~reveal_global_footer:t~ to
   ~#+OPTIONS:~ line. To show the footer on the toc slide but not on
   the title slide, use option ~reveal_toc_footer:t~.

** Fragmented Contents

    Make contents fragmented (show up one-by-one) by setting option
    =ATTR_REVEAL= with property ":frag frag-style", as illustrated
    below.

#+ATTR_REVEAL: :frag roll-in
    Paragraphs can be fragmented.

#+ATTR_REVEAL: :frag roll-in
    - Lists can
    - be fragmented.

#+ATTR_REVEAL: :frag roll-in
    Pictures, tables and many other HTML elements can be fragmented.

*** Fragment Styles
    Available fragment styles are:
#+ATTR_REVEAL: :frag t
    * grow
    * shrink
    * roll-in
    * fade-out
    * highlight-red
    * highlight-green
    * highlight-blue
    * appear

    Setting ~:frag t~ will use reveal.js default fragment style, which
    can be overridden by local option ~#+REVEAL_DEFAULT_FRAG_STYLE~ or
    global variable ~org-re-reveal-default-frag-style~.

*** Fragment Index
    Fragment sequence can be changed by assigning adding ~:frag_idx~
    property to each fragmented element.

#+ATTR_REVEAL: :frag t :frag_idx 3
    And, this paragraph shows at last.

#+ATTR_REVEAL: :frag t :frag_idx 2
    This paragraph shows secondly.

#+ATTR_REVEAL: :frag t :frag_idx 1
    This paragraph shows at first.

*** List Fragments

    ~#+ATTR_REVEAL: :frag frag-style~ above a list defines fragment
    style for the list as a whole.
#+ATTR_REVEAL: :frag grow
    1. All items grow.
    2. As a whole.

    To define fragment styles for every list item, please enumerate
    each item's style in a lisp list.

    ~none~ in the style list will disable fragment for the
    corresponding list item.

    Custom fragment sequence should also be enumerated for each list
    item.

#+REVEAL: split
    An example:

#+BEGIN_SRC org
,#+ATTR_REVEAL: :frag (grow shrink roll-in fade-out none) :frag_idx (4 3 2 1 -)
   * I will grow.
   * I will shrink.
   * I rolled in.
   * I will fade out.
   * I don't fragment.
#+END_SRC

#+ATTR_REVEAL: :frag (grow shrink roll-in fade-out none) :frag_idx (4 3 2 1 -)
   * I will grow.
   * I will shrink.
   * I rolled in.
   * I will fade out.
   * I don't fragment.
#+REVEAL: split
   When there is ~:frag_idx~ specified, insufficient fragment style
   list will be extended by its last element. So a ~:frag (appear)~
   assigns each item of a list the ~appear~ fragment style.
#+BEGIN_SRC org
,#+ATTR_REVEAL: :frag (appear)
   * I appear.
   * I appear.
   * I appear.
#+END_SRC
#+ATTR_REVEAL: :frag (appear)
   * I appear.
   * I appear.
   * I appear.

*** List Fragments with Audio

    You can also use org-re-reveal in combination with the
    audio-slideshow plugin of
    [[https://github.com/rajgoel/reveal.js-plugins][reveal.js-plugins]].
    For example, when the audio-slideshow plugin is configured
    properly, the following plays ~1.ogg~ when the first list item
    appears, ~2.ogg~ for the second list item, and no audio for the
    third.  (You need to add suitable audio files to the current
    directory first.)

#+BEGIN_SRC org
,#+ATTR_REVEAL: :frag (appear) :audio (1.ogg 2.ogg none)
   * I appear with audio 1.ogg.
   * I appear with audio 2.ogg.
   * I appear without audio.
#+END_SRC

#+ATTR_REVEAL: :frag (appear) :audio (1.ogg 2.ogg none)
   * I appear with audio 1.ogg.
   * I appear with audio 2.ogg.
   * I appear without audio.

** Data State and Classes for Headlines and Slides, including generated ones
   :PROPERTIES:
   :reveal_data_state: alert
   :END:

   Set property =reveal_data_state= to a headline to change this
   slide's display style.  (In the past, ~reveal.min.css~ defined
   classes ~alert~, ~blackout~, ~soothe~, which were activated by the
   data state.)  In any case, property =reveal_data_state= adds a
   ~data-state~ attribute to the slide's ~section~ element, which is
   called ‚ÄúSlide State‚Äù by reveal.js; this might also be useful with
   reveal.js plugins.

#+REVEAL: split
   To add a ~data-state~ attribute to a generated title slide or
   table of contents slide, you can use the following options:

   * =REVEAL_TITLE_SLIDE_STATE=
   * =REVEAL_TOC_SLIDE_STATE=

   To add a ~class~ attribute to the ~section~ element of a generated
   table of contents slide, you can use the option
   =REVEAL_TOC_SLIDE_CLASS=.

   To add a ~class~ attribute to a slide's ~h~-element, add property
   =html_headline_class= to the headline.


** Plug-ins

   Reveal.js provides several plug-in functions.

   - reveal-control : Show/hide browsing control pad.
   - reveal-progress : Show/hide progress bar.
   - reveal-history : Enable/disable slide history track.
   - reveal-center : Enable/disable slide centering.
   - multiplex : Enable audience to view presentation on secondary devices.

*** Configure Plug-ins

    Each plugin can be toggled on/off by adding =#+OPTIONS= tags or
    by setting custom variables.

    - =#+OPTIONS= tags:\\
      =reveal_control=, =reveal_progress=, =reveal_history=,
      =reveal_center=, =reveal_rolling_links=, =reveal_keyboard=,
      =reveal_mousewheel=, =reveal_defaulttiming=, =reveal_overview=,
      =reveal_fragmentinurl=, =reveal_pdfseparatefragments=,
      =reveal_inter_presentation_links=
#+REVEAL: split
    - Custom variables:\\
      =org-re-reveal-control=, =org-re-reveal-progress=,
      =org-re-reveal-history=, =org-re-reveal-center=,
      =org-re-reveal-rolling-links=, =org-re-reveal-keyboard=,
      =org-re-reveal-mousewheel=, =org-re-reveal-defaulttiming=,
      =org-re-reveal-fragmentinurl=, =org-re-reveal-pdfseparatefragments=,
      =org-re-reveal-overview=, =reveal_inter_presentation_links=

    For an example, please refer to the heading part of this document.

** Third-Party Plugins
   Reveal.js is also extensible through third-party plugins, which can
   be loaded with org-re-reveal. The paths to javascript loading code
   need to be customized in the variable
   ~org-re-reveal-external-plugins~. This variable can be an
   associative list or a file. If it is an associative list the first
   element of each Assoc cell is a symbol -- the name of the plugin --
   and the second is a string that will be expanded by the ~format~
   function when the plugin is loaded. So, this second element should
   have the form:

   ~" {src: \"%srelative/path/toplugin/from/reveal/root.js\"}"~

   If you need the async or callback parameters, include those too.

#+REVEAL: split

   If ~org-re-reveal-external-plugins~ is a filename, that file must
   contain strings of the above format, one per line (without names of
   plugins, just the ~src~ information embedded in braces); this can
   also be configured within your Org presentation with a line like
   this:

=#+REVEAL_EXTERNAL_PLUGINS: external_plugins.js=

   In any case, org-re-reveal will add the plugins to the dependencies
   parameter when Reveal is initialized.


** Highlight Source Code

   There are two ways to highlight source code.
   1. Use your Emacs theme
   2. Use highlight.js


   To use your Emacs theme, please make sure ~htmlize.el~ is
   installed. Then no more setup is necessary.

   Below is an example. Codes are copied from [[https://wiki.haskell.org/The_Fibonacci_sequence][Haskell Wiki]].
   #+BEGIN_SRC haskell
   fibs = 0 : 1 : next fibs
       where next (a : t@(b:_)) = (a+b) : next t
   #+END_SRC

   If you saw odd indentation, please set variable =org-html-indent=
   to =nil= and export again.

*** Using highlight.js

    You can also use [[https://highlightjs.org][highlight.js]], by adding ~highlight~ to the reveal.js
    plugin list.
    #+BEGIN_SRC org
      ,#+REVEAL_PLUGINS: (highlight)
    #+END_SRC

    The default highlighting theme is ~zenburn.css~ brought with
    reveal.js. To use other themes, please specify the CSS file name by
    ~#+REVEAL_HIGHLIGHT_CSS~ or the variable ~org-re-reveal-highlight-css~.

    The "%r" in the given CSS file name will be replaced by reveal.js'
    URL.

#+MACRO: klipse-languages (eval (message "%s" (mapconcat #'identity org-re-reveal-klipse-languages ", ")))
** Editable and Executable Source Code
   It is now possible to embed code blocks in a codemirror instance in
   order to edit and execute code during a presentation.  At present, this
   capacity is turned on or off at time export using these defcustoms:
   - ~org-re-reveal-klipsify-src~
   - ~org-re-reveal-klipse-css~
   - ~org-re-reveal-klipse-js~
   This feature is turned off by default and needs to be switched on,
   either globally with ~org-re-reveal-klipsify-src~ or per code block
   with ~#+ATTR_REVEAL: :klipsify t~.

   At present code editing is supported in: {{{klipse-languages}}}

   Some examples follow in the Tips section under [[Executable Source Blocks]].


** MathJax
  :PROPERTIES:
  :CUSTOM_ID: my-heading
  :END:

   ${n! \over k!(n-k)!} = {n \choose k}$

   LaTeX equations are rendered in native HTML5 contents.

   *IMPORTANT*: Displaying equations requires an internet connection
   to load JavaScript or a local MathJax installation.
   For the latter, set option =REVEAL_MATHJAX_URL= to
   the URL pointing to the local MathJax location.

   If you use MathJax from a remote location, your privacy policy
   should explain this.

** Preamble and Postamble

   You can define preamble and postamble contents which will not be
   shown as slides, but will be exported into the body part of the
   generated HTML file, at just before and after the slide contents.

   Change preamble and postamble contents globally by setting variable
   =org-re-reveal-preamble= and =org-re-reveal-postamble=.

   Change preamble and postamble contents locally by setting options
   =REVEAL_PREAMBLE= and =REVEAL_POSTAMBLE=, as illustrated at the
   heading part of this document.

   To add custom contents into HTML =<head>= parts, set contents to
   variable =org-re-reveal-head-preamble= or option
   =REVEAL_HEAD_PREAMBLE=.

*** Generating Pre/Postamble by Emacs-Lisp Functions

    If the contents of pre/postamble is the name of an evaluated
    Emacs-Lisp function, which must accept an argument of Org mode
    info and return a string, the returned string will be taken
    as pre/postamble contents.

    So you can embed the Emacs-Lisp function as an Org Babel source
    block and mark it to be evaluated when exporting the document.

** Raw HTML in Slides

   Besides the Org contents, you can embed raw HTML contents
   into slides by placing a =#+REVEAL_HTML= keyword.

   A talk by Linus Torvalds on Git (the source code to embed that
   video makes use of attribute ~data-src~ for lazy loading of the
   video):
   #+REVEAL_HTML: <video controls width="400" height="300" data-src="https://archive.org/download/LinusTorvaldsOnGittechTalk/LinusTorvaldsOnGittechTalk.ogv"></video>

** Speaker Notes
   Reveal.js supports speaker notes, which are displayed in a separate
   browser window. Pressing 's' on slide's windows will pop up a window
   displaying the current slide, the next slide and the speaker notes on the current
   slide.

   org-re-reveal recognize texts between =#+BEGIN_NOTES= and =#+END_NOTES=
   as speaker notes. See the example below.

#+BEGIN_SRC org
,* Heading 1
   Some contents.
,#+BEGIN_NOTES
  Enter speaker notes here.
,#+END_NOTES
#+END_SRC

#+REVEAL: split
   Speaker notes requires the ~notes~ plug-in. If you changed default
   plug-in setting by specifying =#+REVEAL_PLUGINS= or by setting
   variable =org-re-reveal-plugins=, please make sure ~notes~ is in the
   plug-in list to enable speaker notes.

#+REVEAL: split

   Due to a bug in reveal.js, sometimes the speaker notes window
   shows only blank screens. A workaround to this issue is to put
   the presentation HTML file into the reveal.js root directory and
   reopen it in the browser.

*** Easy-Template for Speaker Notes

    Org-re-reveal registers 'n' as key for the speaker notes template:
    You can press '<' followed by 'n' and then press TAB, which
    inserts ~#+begin_notes~ and ~#+end_notes~.  For this to work with
    Org version 9.2 or newer, you need to place ~(require 'org-tempo)~
    into your ~.emacs~ or add ~org-tempo~ to ~org-modules~.  (Besides,
    function ~org-insert-structure-template~ allows to insert different
    kinds of block structures.)

    Customize ~org-re-reveal-note-key-char~ to change the default key
    'n'.  Set to nil to avoid auto-completion for speaker notes.

** Multiplexing
   Reveal.js supports multiplexing, which allows allows your audience to view
   the slides of the presentation you are controlling on their own phone, tablet
   or laptop. As the master presentation navigates the slides, all client
   presentations will update in real time.

   *Warning!* The following is copied from ~org-reveal~ but untested
   with ~org-re-reveal~!

   You can enable multiplexing for your slide generation by including the
   following options:
#+BEGIN_SRC org
#+REVEAL_MULTIPLEX_ID: [Obtained from the socket.io server. ]
#+REVEAL_MULTIPLEX_SECRET: [Obtained from socket.io server. Gives the master control of the presentation.]
#+REVEAL_MULTIPLEX_URL: http://revealjs.jit.su:80 [Location of socket.io server]
#+REVEAL_MULTIPLEX_SOCKETIO_URL: http://cdnjs.cloudflare.com/ajax/libs/socket.io/0.9.10/socket.io.min.js
#+REVEAL_PLUGINS: ([any other plugins you are using] multiplex)
#+END_SRC

#+REVEAL: split
   You must generate unique values for the =REVEAL_MULTIPLEX_ID= and
   =REVEAL_MULTIPLEX_SECRET= options, obtaining these from the socket.io server
   you are using.

   If you include these options in your .org file, reveal-org will enable your
   .html file as the master file for multiplexing and will generate a file named
   in the form =[filename]_client.html= in the same directory as the client
   .html file. Provide your audience with a link to the client file to allow
   them to track your presentation on their own device.

** Extra Stylesheets

   Set =REVEAL_EXTRA_CSS= to a stylesheet file path in order to load extra custom
   styles after loading a theme.

#+BEGIN_SRC org
,#+REVEAL_EXTRA_CSS: url-to-custom-stylesheet.css
#+END_SRC

** Select Built-In Scripts

   Set option =REVEAL_PLUGINS= or variable =org-re-reveal-plugins= to a
   lisp list to select built-in scripts.

   Available built-in scripts are:
   classList/markdown/highlight/zoom/notes/search/remotes.

   Default built-ins are: classList/markdown/highlight/zoom/notes/multiplex.

   The following examples select /markdown/ and /highlight/ only.
#+BEGIN_SRC org
,#+REVEAL_PLUGINS: (markdown highlight)
#+END_SRC

** Extra Dependent Script

   Set =REVEAL_EXTRA_JS= to the url of extra reveal.js dependent
   script if necessary.
#+BEGIN_SRC org
,#+REVEAL_EXTRA_JS: url-to-custom-script.js
#+END_SRC

** Extra Slide Attribute

   Set property =reveal_extra_attr= to headings to add any necessary attributes
   to slides.

** Export into Single File

   By setting option =reveal_single_file= to ~t~, images and basic
   reveal.js scripts will be embedded into the exported HTML file, to make
   a portable HTML. Please note that remote images will /not/ be included in the
   single file, so presentations with remote images will still require an Internet
   connection.

   Attention: This needs locally available reveal.js files!

   #+BEGIN_SRC org
   ,#+OPTIONS: reveal_single_file:t
   #+END_SRC

#+REVEAL: split

   *Limitations* of single file export
   * Some functions provided by reveal.js libraries will be
     *disabled*, including PDF export, Markdown support, zooming,
     speaker notes, and remote control.
     * Code highlighting by highlight.js is also disabled, but *code
       highlighting by Emacs is not affected.*
   * Plugins are *not* enabled.
   * CSS needs to be *self-contained*.  Neither ~@import~ rules nor
     other forms of URLs work (images need to be embedded as
     data URIs).
   * If you use ~org-re-reveal-title-slide~ with custom HTML code and
     images, you need to embed images in the form of data URIs
     yourself.


** Export Current Subtree

  Use menu entry " C-c C-e v s" to export only current subtree,
  without the title slide and the table of content, for a quick preview
  of your current edition.

* Tips

** Disable Heading Numbers

   Add =num:nil= to =#+OPTIONS=
#+BEGIN_SRC org
,#+OPTIONS: num:nil
#+END_SRC

** Disable Table of Contents

   Add =toc:nil= to =#+OPTIONS=
#+BEGIN_SRC org
,#+OPTIONS: toc:nil
#+END_SRC

   This is actually an option recognized by =org-export=. It is only mentioned
   here because slide decks often do not need a TOC.

** Internal Links

   Reveal.js supports only jump between slides, but not between
   elements on slides. Thus, we can only link to headlines in an Org
   document.

   You can create links pointing to a headline's text, or its
   custom-id, as the examples below:

   * [[Tips]].
   * [[#my-heading][Heading]] with a =CUSTOM_ID= property.

#+REVEAL: split
   If you add =reveal_inter_presentation_links:t= to =#+OPTIONS=, such
   links also work between presentations on the same server, e.g.,
   =[[file:somefile.org::#anchor][link text]]=.

   Reveal.js [[https://github.com/hakimel/reveal.js#internal-links][advertises]]
   to use broken internal links, which are used in org-re-reveal by
   default.  (Those links work with reveal.js, but are not understood
   by search engines.)  If you change ~org-re-reveal--href-fragment-prefix~
   from its default to the value of ~org-re-reveal--slide-id-prefix~,
   valid links are generated:
   #+BEGIN_SRC lisp
   (setq org-re-reveal--href-fragment-prefix org-re-reveal--slide-id-prefix)
   #+END_SRC
   Whether this change is a good idea might be discussed under this
   [[https://github.com/hakimel/reveal.js/issues/2276][reveal.js issue]].

** Custom JS

   To pass custom JS code to ~Reveal.initialize~, state the code by
   ~#+REVEAL_INIT_SCRIPT~ (multiple statements are concatenated) or by
   custom variable ~org-re-reveal-init-script~.

** Executable Source Blocks
   To allow live execution of code in some languages, enable the
   klipse plugin
   - either globally by setting ~org-re-reveal-klipsify-src~ to non-nil
   - or per code block by adding ~#+ATTR_REVEAL: :klipsify t~.
   The latter also allows to specify attributes ~klipse-height~ and
   ~klipse-width~ (see next slide for an example).

   Src blocks with the languages contained in
   ~org-re-reveal-klipse-languages~ will be executed with output shown
   in a console-like environment.  See the source code of
   ~org-re-reveal-src-block~ for more details.

*** HTML Src Block
#+ATTR_REVEAL: :klipsify t :klipse-height 200px
#+BEGIN_SRC html
<h1 class="whatever">hello, what's your name</h1>
#+END_SRC

- Above code block activates Klipse via ~#+ATTR_REVEAL: :klipsify t~
  - Regardless of ~org-re-reveal-klipsify-src~
- Subsequent code blocks do not do so

*** Javascript Src Block
#+BEGIN_SRC js
console.log("success");
var x='string using single quote';
x
#+END_SRC

*** Perl Src Block (not klipsified)
#+BEGIN_SRC perl
I don't know perl!
#+END_SRC
* Thanks

  Courtesy to:

#+ATTR_REVEAL: :frag roll-in
  The powerful Org mode,
#+ATTR_REVEAL: :frag roll-in
  the impressive reveal.js
#+ATTR_REVEAL: :frag roll-in
  and the precise MathJax
