This is consult.info, produced by makeinfo version 6.5 from
consult.texi.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Consult: (consult).   Useful commands built on completing-read.
END-INFO-DIR-ENTRY


File: consult.info,  Node: Top,  Next: Introduction,  Up: (dir)

consult.el - Consulting completing-read
***************************************

* Menu:

* Introduction::
* Available commands::
* Special features::
* Installation::
* Related packages::
* Acknowledgements::

— The Detailed Node Listing —

Available commands

* Virtual Buffers::
* Editing::
* Navigation::
* Search::
* Compilation errors::
* Histories::
* Minor and Major modes::
* Miscellaneous::

Special features

* Live previews::
* Narrowing to subsets::
* Asynchronous candidates and filtering::

Installation

* Example configuration::
* Customizable variables::
* Configuration of individual commands::



File: consult.info,  Node: Introduction,  Next: Available commands,  Prev: Top,  Up: Top

1 Introduction
**************

This package provides various handy commands based on the Emacs
completion function ‘completing-read’, which allows to quickly select
from a list of candidates.  Consult offers in particular a more advanced
buffer switching command ‘consult-buffer’ which allows to select from
buffers, recent files and more.  Various search commands are provided,
like an asynchronous ‘consult-grep’, and ‘consult-line’, which resembles
Swiper (https://github.com/abo-abo/swiper#swiper) or Helm-Swoop
(https://github.com/emacsorphanage/helm-swoop).  Please take a look at
the *note full list of commands: Available commands.!

   All Consult commands are compatible with completion systems based on
the standard Emacs ‘completing-read’ API, notably the default completion
system, Icomplete
(https://www.gnu.org/software/emacs/manual/html_node/emacs/Icomplete.html),
Selectrum (https://github.com/raxod502/selectrum) and Embark
(https://github.com/oantolin/embark/).  If Icomplete is used, it is
recommended to install Icomplete-vertical
(https://github.com/oantolin/icomplete-vertical).  The completion system
specifics in this package are kept to a minimum.

   There are the Marginalia (https://github.com/minad/marginalia/) and
Embark (https://github.com/oantolin/embark/) packages, which can be
combined with Consult.  The ‘marginalia-mode’ enriches the completion
display with annotations.  The annotations show for example
documentation strings or file information.  The versatile Embark
packages provides local actions, comparable to a context menu, which can
be executed while selecting a candidate in the minibuffer or in other
contexts.  For example, when selecting from a list of files, an action
to delete the file is offered.  Embark offers more than local actions
and can also be used as a completion system through its live-updating
candidate collect buffer.

   _Note_: If you use Ivy (https://github.com/abo-abo/swiper#ivy) or
Helm (https://github.com/emacs-helm/helm), you probably don’t need
Consult, since both packages already bring their own rich set of
additional commands.


File: consult.info,  Node: Available commands,  Next: Special features,  Prev: Introduction,  Up: Top

2 Available commands
********************

Most provided commands follow the meaningful naming scheme
‘consult-<thing>’.

   *Tip:* If you have Marginalia (https://github.com/minad/marginalia)
installed and heavy annotators enabled, type ‘M-x ^consult’ to see all
Consult commands with their abbreviated description!  Alternatively,
type ‘C-h a ^consult’ to get an overview of all Consult variables and
functions with their descriptions.

* Menu:

* Virtual Buffers::
* Editing::
* Navigation::
* Search::
* Compilation errors::
* Histories::
* Minor and Major modes::
* Miscellaneous::


File: consult.info,  Node: Virtual Buffers,  Next: Editing,  Up: Available commands

2.1 Virtual Buffers
===================

   • ‘consult-buffer’ (‘-other-window’, ‘-other-frame’): Enhanced
     version of ‘switch-to-buffer’ with support for virtual buffers.
     Supports live preview and recursive editing while previewing.  The
     command supports narrowing.  You can type ‘f SPC’ in order to
     narrow to recent files.  Ephemeral buffers can be shown by pressing
     ‘SPC’ - it works the same way as ‘switch-buffer’.  Supported
     narrowing keys:

        • b Buffers
        • f Files
        • m Bookmarks
        • p Project (only available if ‘consult-project-root-function’
          is configured as shown in the *note example configuration:
          Example configuration.)
        • v Views (only available if ‘consult-view-*-function’ is
          configured as shown in the *note example configuration:
          Example configuration.)
   • ‘consult-bookmark’: Select or create bookmark.  You might consider
     the powerful ‘consult-buffer’ instead as an alternative, which
     includes bookmarks.  However ‘consult-bookmark’ supports preview of
     bookmarks and narrowing.
   • ‘consult-recent-file’ (‘-other-window’, ‘-other-frame’): Select a
     recent files.  You might prefer the more powerful ‘consult-buffer’
     instead, which includes recent files.


File: consult.info,  Node: Editing,  Next: Navigation,  Prev: Virtual Buffers,  Up: Available commands

2.2 Editing
===========

   • ‘consult-register’: Select from list of registers.
   • ‘consult-yank’, ‘consult-yank-pop’: Enhanced version of ‘yank’ and
     ‘yank-pop’ which allows selecting from the kill-ring.  Live preview
     is supported when selecting from the kill-ring.
   • ‘consult-kmacro’: Select macro from the macro ring and execute it.


File: consult.info,  Node: Navigation,  Next: Search,  Prev: Editing,  Up: Available commands

2.3 Navigation
==============

   • ‘consult-goto-line’: Jump to line number enhanced with live
     preview.  This is a drop-in replacement for ‘goto-line’.
   • ‘consult-mark’: Jump to a marker in the ‘mark-ring’.  Supports live
     preview and recursive editing.
   • ‘consult-global-mark’: Jump to a marker in the ‘global-mark-ring’.
     Supports live preview and recursive editing.
   • ‘consult-outline’: Jump to a heading of the outline.  Supports live
     preview and recursive editing.
   • ‘consult-imenu’: Jump to imenu item in the current buffer.
     Supports live preview, recursive editing and narrowing.
   • ‘consult-project-imenu’: Jump to imenu item in project buffers,
     with the same major mode as the current buffer.  Supports live
     preview, recursive editing and narrowing.  This feature has been
     inspired by imenu-anywhere
     (https://github.com/vspinu/imenu-anywhere).


File: consult.info,  Node: Search,  Next: Compilation errors,  Prev: Navigation,  Up: Available commands

2.4 Search
==========

   • ‘consult-line’: Enter search string and select from matching lines.
     Supports live preview and recursive editing.  The symbol at point
     and the recent isearch string are added to the "future history" and
     can be accessed by pressing ‘M-n’.
   • ‘consult-multi-occur’: Replacement for ‘multi-occur’ which uses
     ‘completing-read-multiple’.
   • ‘consult-grep’, ‘consult-ripgrep’, ‘consult-git-grep’: Search for
     regular expression in current directory.  Grep is invoked
     asynchronously, while you enter the search term.  You are required
     to enter at least ‘consult-async-min-input’ characters in order for
     the search to get started.  The input string is split into two
     parts, if the first character is a punctuation character, like ‘#’.
     For example ‘#grep-regexp#filter-string’, is split at the second
     ‘#’.  The string "grep-regexp" is passed to Grep, the
     "filter-string" is passed to the _fast_ Emacs filtering to further
     narrow down the list of matches.  This is particularily useful if
     you are using an advanced completion style like orderless.
     ‘consult-grep’ supports preview.  If
     ‘consult-project-root-function’ is *note configured: Example
     configuration. and the function returns non-nil, ‘consult-grep’
     searches the current project directory.  Otherwise the
     ‘default-directory’ is searched.  If ‘consult-grep’ is invoked with
     prefix argument, you can specify the directory manually, i.e., ‘C-u
     M-g r’.
   • ‘consult-find’, ‘consult-locate’: Find file by matching the path
     against a regexp.  Like ‘consult-grep’ either the project root or
     the current directory is used as root directory for the search.
     The input string is treated similarly to ‘consult-grep’, where the
     first part is passed to find, and the second part is used for Emacs
     filtering.  Note that ‘find’ uses wildcards, e.g. enter
     ‘*consult*’, to find all files containing the string "consult".  In
     case you want to use another search utility like ‘fd’, you can
     write wrapper command ‘my-fdfind’ as shown in the *note example
     configuration: Example configuration.


File: consult.info,  Node: Compilation errors,  Next: Histories,  Prev: Search,  Up: Available commands

2.5 Compilation errors
======================

   • ‘consult-error’: Jump to an error.  Supports live preview and
     recursive editing.  In contrast to ‘consult-flycheck’ it shows the
     line and is more general since it is not tied to a specific
     backend.
   • ‘consult-flycheck’: Jump to flycheck error.  Supports live preview
     and recursive editing.  The command supports narrowing.  Press ‘e
     SPC’, ‘w SPC’, ‘i SPC’ to only show errors, warnings and infos
     respectively.  This command requires to install the additional
     ‘consult-flycheck.el’ package since the main ‘consult.el’ package
     only depends on Emacs core components.
   • ‘consult-flymake’: Jump to Flymake diagnostic, like
     ‘consult-flycheck’.


File: consult.info,  Node: Histories,  Next: Minor and Major modes,  Prev: Compilation errors,  Up: Available commands

2.6 Histories
=============

   • ‘consult-complex-command’: Select a command from the
     ‘command-history’.  This command is a ‘completing-read’ version of
     ‘repeat-complex-command’ and can also be considered a replacement
     for the ‘command-history’ command from chistory.el.
   • ‘consult-history’: Insert a string from the current buffer history.
     This command can be invoked from the minibuffer.  In that case the
     history stored in the ‘minibuffer-history-variable’ is used.


File: consult.info,  Node: Minor and Major modes,  Next: Miscellaneous,  Prev: Histories,  Up: Available commands

2.7 Minor and Major modes
=========================

   • ‘consult-minor-mode-menu’: Enable/disable minor mode.  Supports
     narrowing to on/off/local/global modes by pressing ‘i/o/l/g SPC’
     respectively.
   • ‘consult-mode-command’: Run a command from the currently active
     minor or major modes.  Supports narrowing to
     local-minor/global-minor/major mode via the keys ‘l/g/m’.


File: consult.info,  Node: Miscellaneous,  Prev: Minor and Major modes,  Up: Available commands

2.8 Miscellaneous
=================

   • ‘consult-apropos’: Replacement for ‘apropos’ with completion.
   • ‘consult-file-externally’: Select a file and open it externally,
     e.g. using ‘xdg-open’ on Linux.
   • ‘consult-completion-in-region’: Function which can be used as
     ‘completion-in-region-function’.  This way, the minibuffer
     completion UI will be used for ‘completion-at-point’.  This
     function is particularily useful in combination with
     Icomplete-vertical, since Icomplete does not provide its own
     ‘completion-in-region-function’.  In contrast, Selectrum already
     comes with its own function.
   • ‘consult-theme’: Select a theme and disable all currently enabled
     themes.  Supports live preview of the theme while scrolling through
     the candidates.


File: consult.info,  Node: Special features,  Next: Installation,  Prev: Available commands,  Up: Top

3 Special features
******************

Consult enhances ‘completing-read’ with live previews of candidates,
additional narrowing capabilities to candidate subsets and
asynchronously generated candidate lists.  This functionality is
provided by the internal ‘consult--read’ function, which is used by most
Consult commands.  The ‘consult--read’ function is a thin wrapper around
‘completing-read’.  This allows Consult to work with different
completion systems in the backend, while still offering more advanced
features.

* Menu:

* Live previews::
* Narrowing to subsets::
* Asynchronous candidates and filtering::


File: consult.info,  Node: Live previews,  Next: Narrowing to subsets,  Up: Special features

3.1 Live previews
=================

Some Consult commands support live previews.  For example when you
scroll through the items of ‘consult-line’, the buffer will scroll to
the corresponding position.  It is possible to jump back and forth
between the minibuffer and the buffer to perform recursive editing while
the search is ongoing.

   Previews are enabled by default but can be disabled via the
‘consult-preview-key’ variable.  Furthermore it is possible to define a
keybinding to trigger the preview manually as shown in the *note example
configuration: Example configuration.  The default setting of
‘consult-preview-key’ is ‘'any’ which means that the preview will be
triggered on any keypress when the selected candidate changes.  Each
command can be configured individually with its own ‘:preview-key’, such
that preview can be manual for some commands, for some commands
automatic and for some commands completely disabled.


File: consult.info,  Node: Narrowing to subsets,  Next: Asynchronous candidates and filtering,  Prev: Live previews,  Up: Special features

3.2 Narrowing to subsets
========================

Consult has special support to narrow to candidate subsets.  This
functionality is useful if the list of candidates consists of candidates
of multiple types or candidates from multiple sources, like the
‘consult-buffer’ command, which shows both buffers and recently opened
files.

   When you use the ‘consult-buffer’ command, you can press ‘b SPC’ and
the list of candidates will be restricted such that only buffers are
shown.  If you press ‘DEL’ afterwards, the full candidate list will be
shown again.  Furthermore a narrowing prefix key and a widening key can
be configured which can be pressed to achieve the same effect, see the
configuration variables ‘consult-narrow-key’ and ‘consult-widen-key’.

   If which-key (https://github.com/justbur/emacs-which-key) is
installed, the possible narrowing keys are shown in the which-key window
after pressing the prefix key ‘consult-narrow-key’.  Furthermore there
is the ‘consult-narrow-help’ command which can be bound to a key in the
‘consult-narrow-map’ if this is desired, as shown in the *note example
configuration: Example configuration.


File: consult.info,  Node: Asynchronous candidates and filtering,  Prev: Narrowing to subsets,  Up: Special features

3.3 Asynchronous candidates and filtering
=========================================

Consult has support for asynchronous generation of candidate lists.
This feature is used for example by ‘consult-grep’, where the list of
matches is generated dynamically while the user is typing a grep regular
expression.  The grep process is executed in the background.  When
modifying the grep regular expression, the background process is
terminated and a new process is started with the modified regular
expression.

   The matches, which have been found, can then be narrowed using the
installed Emacs completion-style.  This can be very powerful if you are
using for example the ‘orderless’ completion style.

   This two-level filtering is possible by splitting the input string.
Part of the input string is treated as input to grep and part of the
input is used for filtering.  The input string is split at a punctuation
character, using a similar syntax as Perl regular expressions.

   Examples:

   • ‘#defun’: Search for "defun" using grep.
   • ‘#defun#consult’: Search for "defun" using grep, filter with the
     word "consult".
   • ‘/defun/consult’: It is also possible to use other punctuation
     characters.
   • ‘#to#’: Force searching for "to" using grep, since the grep pattern
     must be longer than ‘consult-async-min-input’ characters by
     default.
   • ‘#defun -- --invert-match#’: Pass argument ‘--invert-match’ to
     grep.


File: consult.info,  Node: Installation,  Next: Related packages,  Prev: Special features,  Up: Top

4 Installation
**************

*NOTE: If you are using Selectrum
(https://github.com/raxod502/selectrum), you MUST install the packages
selectrum, consult and consult-selectrum!*

   It is recommended to manage package configurations with the excellent
‘use-package’ macro.  The Consult package only provides commands and
does not add any keybindings.  In order to use the Consult commands, you
must configure the keybindings yourself.

   Note that there are three packages as of now: ‘consult.el’,
‘consult-selectrum.el’ and ‘consult-flycheck.el’.  Consult has been
split such that the main package ‘consult.el’ only depends on Emacs core
components.

* Menu:

* Example configuration::
* Customizable variables::
* Configuration of individual commands::


File: consult.info,  Node: Example configuration,  Next: Customizable variables,  Up: Installation

4.1 Example configuration
=========================

     ;; Example configuration for Consult
     (use-package consult
       ;; Replace bindings. Lazily loaded due by `use-package'.
       :bind (("C-x M-:" . consult-complex-command)
              ("C-c h" . consult-history)
              ("C-c m" . consult-mode-command)
              ("C-x b" . consult-buffer)
              ("C-x 4 b" . consult-buffer-other-window)
              ("C-x 5 b" . consult-buffer-other-frame)
              ("C-x r x" . consult-register)
              ("C-x r b" . consult-bookmark)
              ("M-g g" . consult-goto-line)
              ("M-g M-g" . consult-goto-line)
              ("M-g o" . consult-outline)       ;; "M-s o" is a good alternative.
              ("M-g l" . consult-line)          ;; "M-s l" is a good alternative.
              ("M-g m" . consult-mark)          ;; I recommend to bind Consult navigation
              ("M-g k" . consult-global-mark)   ;; commands under the "M-g" prefix.
              ("M-g r" . consult-git-grep)      ;; or consult-grep, consult-ripgrep
              ("M-g f" . consult-find)          ;; or consult-locate, my-fdfind
              ("M-g i" . consult-project-imenu) ;; or consult-imenu
              ("M-g e" . consult-error)
              ("M-s m" . consult-multi-occur)
              ("M-y" . consult-yank-pop)
              ("<help> a" . consult-apropos))

       ;; The :init configuration is always executed (Not lazy!)
       :init

       ;; Custom command wrappers. It is generally encouraged to write your own
       ;; commands based on the Consult commands. Some commands have arguments which
       ;; allow tweaking. Furthermore global configuration variables can be set
       ;; locally in a let-binding.
       (defun my-fdfind (&optional dir)
         (interactive "P")
         (let ((consult-find-command '("fdfind" "--color=never" "--full-path")))
           (consult-find dir)))

       ;; Replace `multi-occur' with `consult-multi-occur', which is a drop-in replacement.
       (fset 'multi-occur #'consult-multi-occur)

       ;; Configure other variables and modes in the :config section, after lazily loading the package
       :config

       ;; Configure preview. Note that the preview-key can also be configured on a
       ;; per-command basis via `consult-config'.
       ;; The default value is 'any, such that any key triggers the preview.
       ;; (setq consult-preview-key (kbd "M-p"))

       ;; Optionally configure narrowing key.
       ;; Both < and C-+ work reasonably well.
       (setq consult-narrow-key "<") ;; (kbd "C-+")
       ;; Optionally make narrowing help available in the minibuffer.
       ;; Probably not needed if you are using which-key.
       ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

       ;; Optional configure a view library to be used by `consult-buffer'.
       ;; The view library must provide two functions, one to open the view by name,
       ;; and one function which must return a list of views as strings.
       ;; Example: https://github.com/minad/bookmark-view/
       ;; (setq consult-view-open-function #'bookmark-jump
       ;;       consult-view-list-function #'bookmark-view-names)

       ;; Optionally configure a function which returns the project root directory
       (autoload 'projectile-project-root "projectile")
       (setq consult-project-root-function #'projectile-project-root))

     ;; Enable Consult-Selectrum integration.
     ;; This package should be installed if Selectrum is used.
     (use-package consult-selectrum
       :after selectrum
       :demand t)

     ;; Optionally add the `consult-flycheck' command.
     (use-package consult-flycheck
       :bind (:map flycheck-command-map
                   ("!" . consult-flycheck)))


File: consult.info,  Node: Customizable variables,  Next: Configuration of individual commands,  Prev: Example configuration,  Up: Installation

4.2 Customizable variables
==========================

*Tip:* If you have Marginalia (https://github.com/minad/marginalia)
installed, type ‘M-x customize-variable RET ^consult’ to see all
Consult-specific customizable variables with their current values and
abbreviated description!  Alternatively, type ‘C-h a ^consult’ to get an
overview of all Consult variables and functions with their descriptions.

Variable                        Default            Description
------------------------------------------------------------------------------------------------------------
consult-after-jump-hook         ’(recenter)        Functions to call after jumping to a location
consult-async-default-split     "#"                Separator character used for splitting #async#filter
consult-async-input-debounce    0.25               Input debounce for asynchronous commands
consult-async-input-throttle    0.5                Input throttle for asynchronous commands
consult-async-min-input         3                  Minimum numbers of letters needed for async process
consult-async-refresh-delay     0.25               Refresh delay for asynchronous commands
consult-bookmark-narrow         ...                Narrowing configuration for ‘consult-bookmark’
consult-buffer-filter           ...                Filter for ‘consult-buffer’
consult-config                  nil                Invididual command option configuration
consult-find-command            ’(...)             Command line arguments for find
consult-fontify-limit           1048576            Buffers larger than this limit are not fontified
consult-git-grep-command        ’(...)             Command line arguments for git-grep
consult-goto-line-numbers       t                  Show line numbers for ‘consult-goto-line’
consult-grep-command            ’(...)             Command line arguments for grep
consult-imenu-narrow            ...                Mode-specific narrowing keys for ‘consult-imenu’
consult-imenu-toplevel          ...                Mode-specific toplevel names used by ‘consult-imenu’
consult-line-numbers-widen      t                  Show absolute line numbers when narrowing is active.
consult-line-point-placement    ’match-beginning   Placement of the point used by ‘consult-line’
consult-locate-command          ’(...)             Command line arguments for locate
consult-mode-command-filter     ...                Filter for ‘consult-mode-command’
consult-mode-histories          ...                Mode-specific history variables
consult-narrow-key              nil                Narrowing prefix key during completion
consult-preview-key             ’any               Key which triggers preview
consult-preview-max-count       10                 Maximum number of files to keep open during preview
consult-preview-max-size        10485760           Size limit for previewed files
consult-project-root-function   nil                Function which returns current project root
consult-ripgrep-command         ’(...)             Command line arguments for ripgrep
consult-themes                  nil                List of themes to be presented for selection
consult-view-list-function      nil                Function which returns a list of view names as strings
consult-view-open-function      nil                Function to open a view by name
consult-widen-key               nil                Widening key during completion


File: consult.info,  Node: Configuration of individual commands,  Prev: Customizable variables,  Up: Installation

4.3 Configuration of individual commands
========================================

*Note:* This configuration feature is made available for experienced
users, in case fine-grained control for each individual command is
needed.

   Commands allow flexible, individual customization by setting the
‘consult-config’ list.  You can override any option passed to the
internal ‘consult--read’ API, for example ‘:preview-key’, ‘:initial’,
‘:default’, ‘:history’ or ‘:sort’.  Note that since ‘consult--read’ is
part of the internal API, options could be removed, replaced or renamed
at any time.

     ;; Set preview for `consult-buffer' to key `M-p'
     ;; and disable preview for `consult-theme' completely.
     (setq consult-config `((consult-theme :preview-key nil)
                            (consult-buffer :preview-key ,(kbd "M-p"))))

   Generally it is possible to modify commands for your individual needs
by the following techniques:

  1. Create your own wrapper function which passes modified arguments to
     the Consult functions.
  2. Modify ‘consult-config’ in order to change the ‘consult--read’
     settings.
  3. Create advices to modify some internal behavior.
  4. Write or propose a patch!


File: consult.info,  Node: Related packages,  Next: Acknowledgements,  Prev: Installation,  Up: Top

5 Related packages
******************

*NOTE: If you are using Selectrum
(https://github.com/raxod502/selectrum), you MUST install the packages
selectrum, consult and consult-selectrum!*

   It is recommended to install the following package combination:

   • consult: This package
   • consult-flycheck: Provides the consult-flycheck command
   • consult-selectrum: Provides integration with Selectrum
   • selectrum (https://github.com/raxod502/selectrum) or
     icomplete-vertical
     (https://github.com/oantolin/icomplete-vertical): Vertical
     completion systems
   • marginalia (https://github.com/minad/marginalia): Annotations for
     the completion candidates
   • embark (https://github.com/oantolin/embark): Action commands, which
     can act on the completion candidates
   • orderless (https://github.com/oantolin/orderless): Completion
     style, Flexible candidate filtering
   • prescient (https://github.com/raxod502/prescient.el):
     Frecency-based candidate sorting, also offers filtering

   Note that all packages are independent and can potentially be
exchanged with alternative components, since there exist no hard
dependencies.  Furthermore it is possible to get started with only
Selectrum and Consult and add more components later to the mix.


File: consult.info,  Node: Acknowledgements,  Prev: Related packages,  Up: Top

6 Acknowledgements
******************

You probably guessed from the name that this package took inspiration
from Counsel (https://github.com/abo-abo/swiper#counsel) by Oleh Krehel.
Some of the commands found in this package originated in the Selectrum
wiki (https://github.com/raxod502/selectrum/wiki/Useful-Commands).

   Code contributions:
   • Omar Antolín Camarena (https://github.com/oantolin/)
   • Sergey Kostyaev (https://github.com/s-kostyaev/)
   • okamsn (https://github.com/okamsn/)
   • Clemens Radermacher (https://github.com/clemera/)
   • Tom Fitzhenry (https://github.com/tomfitzhenry/)
   • jakanakaevangeli (https://github.com/jakanakaevangeli)
   • inigoserna (https://github.com/inigoserna/)
   • Adam Spiers (https://github.com/aspiers/)

   Advice and useful discussions:
   • Clemens Radermacher (https://github.com/clemera/)
   • Omar Antolín Camarena (https://github.com/oantolin/)
   • Protesilaos Stavrou (https://gitlab.com/protesilaos/)
   • Steve Purcell (https://github.com/purcell/)
   • Adam Porter (https://github.com/alphapapa/)
   • Manuel Uberti (https://github.com/manuel-uberti/)
   • Tom Fitzhenry (https://github.com/tomfitzhenry/)
   • Howard Melman (https://github.com/hmelman/)



Tag Table:
Node: Top205
Node: Introduction892
Node: Available commands3123
Node: Virtual Buffers3828
Node: Editing5301
Node: Navigation5789
Node: Search6846
Node: Compilation errors9271
Node: Histories10166
Node: Minor and Major modes10819
Node: Miscellaneous11350
Node: Special features12295
Node: Live previews13033
Node: Narrowing to subsets14086
Node: Asynchronous candidates and filtering15413
Node: Installation17026
Node: Example configuration17907
Node: Customizable variables21839
Node: Configuration of individual commands25468
Node: Related packages26836
Node: Acknowledgements28237

End Tag Table


Local Variables:
coding: utf-8
End:
