# -*- mode: snippet -*-
# name: storage
# key: storage
# --

$0 //  package `(file-name-nondirectory (directory-file-name (file-name-directory default-directory)))`

// ${1:$(progn (require 'lazy-camelize) (camelize-method yas/text))}$3Storage storage.Storage// ${1:$(underscore yas/text)}+${3:$(underscore yas/text)} 反查$8
// ${1:$(camelize-method yas/text )}$3Storage=`(file-name-nondirectory (directory-file-name (file-name-directory default-directory)))`.New$1$3Storage() 
import (
	"errors"
	"fmt"
	"time"
    
	"gitlab.luojilab.com/${10:`(file-name-nondirectory (directory-file-name (file-name-directory (expand-file-name "../../../"))))`}/${11:`(file-name-nondirectory (directory-file-name (file-name-directory (expand-file-name "../../"))))`}/dao"
	"gitlab.luojilab.com/$10/$11/models"
	"gitlab.luojilab.com/zeroteam/common/context"
	"gitlab.luojilab.com/zeroteam/common/storage"
)
func New$1$3Storage() storage.Storage {
        keyPrefix := "$11:${5:$(underscore yas/text)}:${1:$(underscore yas/text)}-${3:$(underscore yas/text)}"
	    redisClient := dao.GetRedis${11:$(upcase-first-char yas/text)}()
        redixExpiration := time.Hour*24
        backup := new$1$3DB(New$5Dao(false))

        return redisClient.NewStorage(keyPrefix, redixExpiration,storage.WithBackupStorage(backup))
}


type $1$3Key struct{
     ${1:Field1} ${2:int64} \`json:"${1:$(underscore yas/text)}"\`
     ${3:Field2} ${4:int64}  \`json:"${3:$(underscore yas/text)}"\`
}
func (this $1$3Key)String()string{
	return fmt.Sprintf("%d-%d", this.$1,this.$3)
}

type $1$3DB struct {
	storage.StorageAdapter
	dao *${5:Models}Dao
}

func new$1$3DB(dao *$5Dao) *$1$3DB {
	return &$1$3DB{dao: dao}
}

func (this *$1$3DB) MultiGet(ctx context.IContext, keys, valuesMap interface{}) error {
    ks,ok:=keys.([]$1$3Key)
    if !ok{
       return errors.New("keys must be []$1$3Key")
    }
	if len(ks) == 0 {
		return nil
	}

	var sql string = "select ${8:id},${1:$(underscore yas/text)},${3:$(underscore yas/text)} from ${5:$(underscore yas/text)} where ( "
	for idx, k := range ks {
		if idx == len(ks)-1 {
			sql += fmt.Sprintf("(${1:$(underscore yas/text)}=%d and ${3:$(underscore yas/text)}=%d)", k.$1,k.$3)
		} else {
			sql += fmt.Sprintf("(${1:$(underscore yas/text)}=%d and ${3:$(underscore yas/text)}=%d) or ", k.$1,k.$3)
		}
	}
	sql += " )"
	var tmpResult []models.$5
	err:=this.dao.DB().NewSessionAutoClose(ctx).SQL(sql).Find(&tmpResult)
	result := valuesMap.(map[$1$3Key]$9)
	for idx, c := range tmpResult {
		result[$1$3Key{$1:$2(c.$1), $3:$4(c.$3)}] = tmpResult[idx].${8:$(camelize yas/text)}
	}
	return err
}

// Get ...
func (this *$1$3DB) Get(ctx context.IContext, key, object interface{}) error {
    k:=key.($1$3Key)

	var tmpResult models.$5
	has, err := this.dao.DB().NewSessionAutoClose(ctx).Where("${1:$(underscore yas/text)}=?",k.$1).
    Where("${3:$(underscore yas/text)}=?", k.$3).Cols("$8").Get(&tmpResult)
	if err != nil {
		return err
	}
	if !has {
		return this.ErrorNotFound(key)
	}

	result, ok := object.(*${9:int64})
	if !ok {
		ctx.Error("$1$3DB.Get cast *int64 error")
		return errors.New("$1$3DB.Get cast *int64 error")
	}

	*result = $9(tmpResult.${8:$(camelize yas/text)})

	return nil
}

